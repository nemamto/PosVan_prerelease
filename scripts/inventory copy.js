// Funkce pro naƒçten√≠ produkt≈Ø ze serveru
//const serverEndpoint = 'https://posven00-707895647386.us-central1.run.app';
const serverEndpoint = 'http://127.0.0.1:3000';

async function loadProducts() {
    try {
        const response = await fetch(`${serverEndpoint}/products`);
        if (!response.ok) {
            throw new Error('Chyba p≈ôi naƒç√≠t√°n√≠ produkt≈Ø');
        }
        const products = await response.json();
        console.log('Naƒçten√© produkty:', products); // Ovƒõ≈ôen√≠ naƒçten√Ωch dat

        if (!Array.isArray(products) || products.length === 0) {
            console.warn('≈Ω√°dn√© produkty nebyly naƒçteny.');
            return;
        }

        renderInventory(products); // Vol√°n√≠ funkce k vykreslen√≠
    } catch (error) {
        console.error('Chyba p≈ôi naƒç√≠t√°n√≠ produkt≈Ø:', error);
    }
}


// Funkce pro vykreslen√≠ invent√°≈ôe v HTML
function renderInventory(products) {
    const inventoryContainer = document.getElementById('inventory-list');

    if (!inventoryContainer) {
        console.error('‚ùå Element s ID "inventory-list" nebyl nalezen.');
        return;
    }

    inventoryContainer.innerHTML = `
        <tr>
            <th>N√°zev</th>
            <th>Popis</th>
            <th>Mno≈æstv√≠</th>
            <th>Cena</th>
            <th>Akce</th>
        </tr>
    `; // Z√°hlav√≠ tabulky

    products.forEach((product) => {
        if (!product || !product.name) {
            console.warn('‚ö†Ô∏è Neplatn√Ω produkt:', product);
            return;
        }

        const row = document.createElement('tr');
        row.style.backgroundColor = product.color || '#fff';

        row.innerHTML = `
            <td>${product.name}</td>
            <td>${product.description || 'Bez popisu'}</td>
            <td>${product.quantity}</td>
            <td>${product.price} Kƒç</td>
            <td>
                <button class="delete-button" data-id="${product.id}">Smazat</button>
            </td>
        `;

        inventoryContainer.appendChild(row);
    });

    
    document.querySelectorAll('.delete-button').forEach(button => {
        button.addEventListener('click', (event) => {
            const productId = event.target.getAttribute('data-id');
            openDeleteModal(productId);
        });
    });
}
// üü¢ Zav≈ô√≠t modal p≈ôi kliknut√≠ na tlaƒç√≠tka
document.getElementById('confirm-action').addEventListener('click', closeModal);



document.addEventListener('DOMContentLoaded', () => {
    const addProductButton = document.getElementById('addProductButton');
    const confirmDeleteButton = document.getElementById('confirmDelete');
    const cancelDeleteButton = document.getElementById('cancelDelete');

    // Kontrola, zda tlaƒç√≠tka existuj√≠ v DOM
    if (addProductButton) {
        addProductButton.addEventListener('click', handleAddProduct);
    } else {
        console.error("‚ùå Tlaƒç√≠tko pro p≈ôid√°n√≠ produktu nebylo nalezeno.");
    }

    if (confirmDeleteButton && cancelDeleteButton) {
        confirmDeleteButton.addEventListener('click', handleDeleteConfirmed);
        cancelDeleteButton.addEventListener('click', closeDeleteModal);
    } else {
        console.error("‚ùå Tlaƒç√≠tka pro potvrzen√≠ a zru≈°en√≠ maz√°n√≠ nebyla nalezena.");
    }

    // Skryjeme mod√°ln√≠ okna p≈ôi naƒçten√≠ str√°nky
    const deleteModal = document.getElementById('deleteModal');
    if (deleteModal) {
        deleteModal.style.display = 'none';
    }
});

function handleDeleteConfirmed() {
    if (productIdToDelete) {
        fetch(`${serverEndpoint}/deleteProduct`, {
            method: 'DELETE',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id: productIdToDelete })
        })
        .then(response => response.json())
        .then(data => {
            console.log("‚úÖ Produkt smaz√°n:", data.message);
            loadProducts(); // Aktualizujeme sklad
            closeDeleteModal();
        })
        .catch(error => console.error('‚ùå Chyba p≈ôi odstra≈àov√°n√≠ produktu:', error));
    }
}


// Funkce pro p≈ôid√°n√≠ nov√©ho produktu
async function handleAddProduct() {
    const name = document.getElementById('productName').value.trim();
    const description = document.getElementById('productDescription').value.trim();
    const quantity = parseInt(document.getElementById('productQuantity').value, 10);
    const price = parseFloat(document.getElementById('productPrice').value);
    const color = document.getElementById('productColor').value;  // Z√≠sk√°n√≠ vybran√© barvy

    if (!name || isNaN(quantity) || isNaN(price) || quantity <= 0 || price <= 0 || !document.getElementById('productColor').value) {
        openModal("‚ùå Vypl≈àte v≈°echna pole spr√°vnƒõ a vyberte barvu!");
        return;
    }

    console.log("üõí P≈ôid√°v√°m nov√Ω produkt:", { name, description, quantity, price, color });

    try {
        const response = await fetch(`${serverEndpoint}/addProduct`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ name, description, quantity, price, color })
        });

        if (!response.ok) {
            throw new Error("Chyba p≈ôi p≈ôid√°v√°n√≠ produktu.");
        }

        const data = await response.json();
        console.log("‚úÖ Produkt p≈ôid√°n:", data.product);
        // Zobraz√≠me potvrzen√≠, modal pou≈æijeme jen p≈ôi chybƒõ ‚Äì nebo volitelnƒõ i p≈ôi √∫spƒõchu
        // openModal("‚úÖ Produkt √∫spƒõ≈°nƒõ p≈ôid√°n!");
        loadProducts(); // Aktualizace seznamu produkt≈Ø
    } catch (error) {
        console.error("‚ùå Chyba p≈ôi p≈ôid√°v√°n√≠ produktu:", error);
        openModal("‚ùå Chyba p≈ôi p≈ôid√°v√°n√≠ produktu!");
    }
}




function handleEditProduct(event) {
    const row = event.target.closest('tr');
    const id = event.target.getAttribute('data-id');

    const cells = Array.from(row.children);
    const [idCell, nameCell, quantityCell, priceCell, actionCell] = cells;

    // Vlo≈æ√≠me vstupy do bu≈àky
    nameCell.innerHTML = `<input type="text" value="${nameCell.textContent}">`;
    quantityCell.innerHTML = `<input type="number" value="${quantityCell.textContent}">`;
    priceCell.innerHTML = `<input type="number" step="0.01" value="${parseFloat(priceCell.textContent)}">`;

    // Nastav√≠me tlaƒç√≠tko "Ulo≈æit"
    const saveButton = document.createElement('button');
    saveButton.textContent = 'Ulo≈æit';
    saveButton.classList.add('save-btn');
    saveButton.addEventListener('click', () => handleSaveInline(id, nameCell, quantityCell, priceCell, row));

    // Nastav√≠me tlaƒç√≠tko "Zru≈°it"
    const cancelButton = document.createElement('button');
    cancelButton.textContent = 'Zru≈°it';
    cancelButton.classList.add('cancel-btn');
    cancelButton.addEventListener('click', () => loadProducts());

    // Vymaz√°n√≠ star√Ωch tlaƒç√≠tek a vlo≈æen√≠ "Ulo≈æit"/"Zru≈°it"
    actionCell.innerHTML = ''; 
    actionCell.appendChild(saveButton);
    actionCell.appendChild(cancelButton);
}

// Funkce pro odstranƒõn√≠ produktu
let productIdToDelete = null; // Uchov√°n√≠ ID pro smaz√°n√≠

// üü¢ Otev≈ôen√≠ mod√°ln√≠ho okna
function openDeleteModal(id) {
    productIdToDelete = id;
    const modal = document.getElementById('deleteModal');
    modal.classList.add('visible');
}

// üü¢ Zav≈ôen√≠ mod√°ln√≠ho okna
function closeDeleteModal() {
    const modal = document.getElementById('deleteModal');
    modal.classList.remove('visible');
}

// üü¢ Potvrzen√≠ smaz√°n√≠ produktu
async function handleDeleteConfirmed() {
    if (!productIdToDelete) return;

    try {
        const response = await fetch(`${serverEndpoint}/deleteProduct`, {
            method: 'DELETE',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id: productIdToDelete })
        });

        if (!response.ok) {
            throw new Error("Chyba p≈ôi maz√°n√≠ produktu.");
        }

        console.log(`‚úÖ Produkt ${productIdToDelete} smaz√°n.`);
        openModal("Produkt √∫spƒõ≈°nƒõ smaz√°n!");

        loadProducts(); // üü¢ Aktualizace tabulky
    } catch (error) {
        console.error("‚ùå Chyba p≈ôi maz√°n√≠ produktu:", error);
        openModal("Chyba p≈ôi maz√°n√≠ produktu!");
    } finally {
        closeDeleteModal();
    }
}

// üü¢ Event listenery pro tlaƒç√≠tka v modalu
document.getElementById('confirmDelete').addEventListener('click', handleDeleteConfirmed);
document.getElementById('cancelDelete').addEventListener('click', closeDeleteModal);

// üü¢ P≈ôid√°n√≠ listener≈Ø k tlaƒç√≠tk≈Øm smaz√°n√≠ v tabulce
document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.delete-button').forEach(button => {
        button.addEventListener('click', (event) => {
            const productId = event.target.getAttribute('data-id');
            openDeleteModal(productId);
        });
    });
});


document.addEventListener('DOMContentLoaded', () => {
    loadProducts(); // Naƒç√≠st produkty p≈ôi naƒçten√≠ str√°nky

    // P≈ôidat event listener na tlaƒç√≠tko p≈ôid√°n√≠ produktu
    document.getElementById('addProductButton').addEventListener('click', handleAddProduct);

    // Nastaven√≠ listener≈Ø pro potvrzen√≠ a zru≈°en√≠ maz√°n√≠
    const confirmDeleteButton = document.getElementById('confirmDelete');
    const cancelDeleteButton = document.getElementById('cancelDelete');

    if (confirmDeleteButton && cancelDeleteButton) {
        confirmDeleteButton.addEventListener('click', () => {
            if (productIdToDelete) {
                fetch(`${serverEndpoint}/deleteProduct`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ id: productIdToDelete })
                })
                .then(response => response.json())
                .then(data => {
                    console.log("Zpr√°va o smaz√°n√≠:", data.message);
                    loadProducts(); // Obnov√≠ invent√°≈ô po smaz√°n√≠
                    closeDeleteModal();
                })
                .catch(error => console.error('Chyba p≈ôi odstra≈àov√°n√≠ produktu:', error));
            }
        });

        cancelDeleteButton.addEventListener('click', closeDeleteModal);
    } else {
        console.error("Prvky confirmDelete nebo cancelDelete nebyly nalezeny v DOM.");
    }
});


function enableEditing(row) {
    // Naƒçteme ID produktu z atributu data-id na ≈ô√°dku
    const id = row.getAttribute('data-id'); 

    // Z√≠sk√°me bu≈àky pro n√°zev, popis, mno≈æstv√≠ a cenu
    const nameCell = row.querySelector('td:nth-child(2)');
    const descriptionCell = row.querySelector('td:nth-child(3)');
    const quantityCell = row.querySelector('td:nth-child(4)');
    const priceCell = row.querySelector('td:nth-child(5)');

    // P≈ôid√°me logov√°n√≠ pro kontrolu
    console.log("Bu≈àky pro √∫pravy:", { nameCell, descriptionCell, quantityCell, priceCell });

    // Zmƒõna obsahu bunƒõk na editovateln√© pole
    nameCell.innerHTML = `<input type="text" value="${nameCell.textContent.trim()}">`;
    descriptionCell.innerHTML = `<input type="text" value="${descriptionCell.textContent.trim()}">`;
    quantityCell.innerHTML = `<input type="number" value="${quantityCell.textContent.trim()}">`;
    priceCell.innerHTML = `<input type="number" step="0.01" value="${priceCell.textContent.trim()}">`;

    // P≈ôepnut√≠ tlaƒç√≠tek
    const saveButton = row.querySelector('.save-btn');
    const deleteButton = row.querySelector('.delete-btn');
    saveButton.style.display = 'inline';
    deleteButton.textContent = 'Zru≈°it';
    deleteButton.addEventListener('click', () => {
        // Obnoven√≠ p≈Øvodn√≠ch hodnot a ukonƒçen√≠ re≈æimu √∫prav
        loadProducts();
    });

    // P≈ôid√°me obsluhu ud√°losti pro ulo≈æen√≠ zmƒõn
    saveButton.addEventListener('click', () => {
        handleSaveInline(
            id,
            nameCell.querySelector('input').value,
            descriptionCell.querySelector('input').value,
            quantityCell.querySelector('input').value,
            priceCell.querySelector('input').value,
            row
        );
    });
}

function handleEditInline(event) {
    const row = event.target.closest('tr');
    row.querySelectorAll('td').forEach((cell, index) => {
        if (index > 0 && index < 5) { // P≈ôeskoƒç√≠me ID a jin√© nepodstatn√© bu≈àky
            const originalValue = cell.innerText.replace(' Kƒç', ''); // odstran√≠ Kƒç, pokud je uvedeno
            cell.innerHTML = `<input type="text" value="${originalValue}" />`;
        }
    });

    // P≈ôepnut√≠ tlaƒç√≠tek
    row.querySelector('.edit-btn').style.display = 'none';
    row.querySelector('.save-btn').style.display = 'inline';
}
function handleSaveInline(event) {
    const row = event.target.closest('tr');
    const id = row.getAttribute('data-id');
    
    console.log("≈ò√°dek ID p≈ôi ukl√°d√°n√≠:", id); // Logov√°n√≠ ID p≈ôi ukl√°d√°n√≠

    if (!id) {
        console.error("ID produktu nen√≠ k dispozici");
        return;
    }

    const name = row.querySelector('td:nth-child(2) input').value;
    const description = row.querySelector('td:nth-child(3) input').value;
    const quantity = parseInt(row.querySelector('td:nth-child(4) input').value);
    const price = parseFloat(row.querySelector('td:nth-child(5) input').value);

    console.log("Upravovan√© hodnoty:", { id, name, description, quantity, price });

    fetch(`${serverEndpoint}/updateProduct`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            id,
            name,
            description,
            quantity,
            price
        })
    })
    .then(response => response.json())
    .then(data => {
        console.log("Aktualizace produktu:", data.message);
        loadProducts(); 
    })
    .catch(error => console.error('Chyba p≈ôi √∫pravƒõ produktu:', error));
}





// Naƒç√≠st a vykreslit invent√°≈ô p≈ôi naƒçten√≠ str√°nky a p≈ôidat event listener na tlaƒç√≠tko p≈ôid√°n√≠
document.addEventListener('DOMContentLoaded', () => {
    loadProducts(); // Naƒç√≠st produkty p≈ôi naƒçten√≠ str√°nky

    // P≈ôidat event listener na tlaƒç√≠tko p≈ôid√°n√≠ produktu
    document.getElementById('addProductButton').addEventListener('click', handleAddProduct);
});

// P≈ôep√≠n√°n√≠ mezi str√°nkami p≈ôes tlaƒç√≠tka ve footeru
document.getElementById('cashier-button').addEventListener('click', function() {
    window.location.href = 'cashier.html'; // P≈ôesmƒõruje na str√°nku Pokladna
});

document.getElementById('inventory-button').addEventListener('click', function() {
    window.location.href = 'inventory.html'; // P≈ôesmƒõruje na str√°nku Invent√°≈ô
});

document.getElementById('order-management-button').addEventListener('click', function() {
    window.location.href = 'order_management.html'; // P≈ôesmƒõruje na str√°nku Spr√°va objedn√°vek
});
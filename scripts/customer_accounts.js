const serverEndpoint = 'http://localhost:3000'; // Zmƒõ≈àte podle pot≈ôeby na cloudovou adresu

// Naƒç√≠t√°n√≠ seznamu z√°kazn√≠k≈Ø
async function loadCustomers() {
    try {
        const response = await fetch(`${serverEndpoint}/customers`);
        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }
        const customers = await response.json();
        await renderCustomerList(customers);
    } catch (error) {
        console.error("Chyba p≈ôi naƒç√≠t√°n√≠ z√°kazn√≠k≈Ø:", error);
        alert("Nepoda≈ôilo se naƒç√≠st z√°kazn√≠ky.");
    }
}

// Funkce pro z√≠sk√°n√≠ souhrnu objedn√°vek z√°kazn√≠ka
// Funkce pro z√≠sk√°n√≠ souhrnu objedn√°vek z√°kazn√≠ka
let orders
async function getOrderSummary(customerName) {
    try {
        const sanitizedCustomerName = customerName.replace(/\s+/g, "_");
        const response = await fetch(`${serverEndpoint}/customerOrders?customer=${encodeURIComponent(sanitizedCustomerName)}`);

        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }

        let orders = await response.json(); // ‚úÖ Ujisti se, ≈æe orders existuje

        if (!orders || orders.length === 0) {
            return { lastOrderDate: '≈Ω√°dn√©', totalPrice: '0.00 Kƒç' };
        }

        // ‚úÖ Filtrujeme pouze nezaplacen√© objedn√°vky
        orders = orders.filter(order => 
            order.payed?.toString().replace("@", "") !== "true" &&  
            order['@payed']?.toString().replace("@", "") !== "true"
        );

        // ‚úÖ Se≈ôad√≠me objedn√°vky podle data od nejnovƒõj≈°√≠
        orders = orders.sort((a, b) => new Date(b.Date) - new Date(a.Date));

        const lastOrder = orders.length > 0 ? orders[0] : { Date: 'Nezn√°m√© datum' };

        // ‚úÖ Oprava sƒç√≠t√°n√≠ cen objedn√°vek
        const totalPrice = orders.reduce((sum, order) => {
            const price = Number(order.TotalPrice || 0);
            return sum + (isNaN(price) ? 0 : price);
        }, 0);

        return {
            lastOrderDate: lastOrder.Date,
            totalPrice: `${totalPrice.toFixed(2)} Kƒç`
        };
    } catch (error) {
        console.error("‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ souhrnu objedn√°vek:", error);
        return { lastOrderDate: 'Chyba', totalPrice: 'Chyba' };
    }
}


// Vykreslen√≠ seznamu z√°kazn√≠k≈Ø ve form√°tu tabulky
async function renderCustomerList(customers) {
    const tbody = document.getElementById('customerTableBody');
    tbody.innerHTML = '';

    const promises = customers.map(async customer => {
        const summary = await getOrderSummary(customer.name);
        return { customer, summary };
    });

    const results = await Promise.all(promises);

    results.forEach(({ customer, summary }) => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${customer.name}</td>
            <td>${summary.lastOrderDate}</td>
            <td>${summary.totalPrice} Kƒç</td>
            <td>
                <button class="view-orders" data-name="${customer.name}">Zobrazit</button>
                <button class="pay-order" data-name="${customer.name}">Zaplatit</button>
            </td>
        `;
        tbody.appendChild(row);
    });

    document.querySelectorAll('.view-orders').forEach(button => {
        button.addEventListener('click', e => {
            const customerName = e.target.getAttribute('data-name');
            loadOrders(customerName);
        });
    });

    document.querySelectorAll('.pay-order').forEach(button => {
        button.addEventListener('click', e => {
            const customerName = e.target.getAttribute('data-name');
            payOrder(customerName);
        });
    });

}
function normalizeCustomerName(name) {
    return name.replace(/\s+/g, "_");
}

async function submitOrder() {
    console.log(`üì§ Odes√≠l√°m objedn√°vku:`, order);

    const shiftID = getShiftID(); // üü¢ Kontrola aktu√°ln√≠ smƒõny

    if (!shiftID) {
        console.error("‚ùå Chyba: Smƒõna nen√≠ otev≈ôen√°!");
        showModal("‚ùå Nelze zpracovat objedn√°vku: Smƒõna nen√≠ otev≈ôen√°!", true, true);
        return;
    }

    const requestBody = {
        order: order.map(item => ({
            name: item.name,
            quantity: item.quantity,
            price: item.price,
            totalPrice: item.totalPrice
        })),
        paymentMethod: selectedPaymentMethod,
        totalAmount: totalAmount,
        selectedCustomer: selectedCustomer,
        shiftID: shiftID // ‚úÖ P≈ôid√°no shiftID
    };

    try {
        const response = await fetch(`${serverEndpoint}/logOrder`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(requestBody),
        });

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`HTTP error! Status: ${response.status} - ${errorText}`);
        }

        const result = await response.json();
        console.log(`‚úÖ Objedn√°vka √∫spƒõ≈°nƒõ odesl√°na:`, result);
        resetOrder(); // ‚úÖ Po odesl√°n√≠ vyƒçist√≠ objedn√°vku
    } catch (error) {
        console.error("‚ùå Chyba p≈ôi odes√≠l√°n√≠ objedn√°vky:", error);
        showModal("‚ùå Chyba p≈ôi odes√≠l√°n√≠ objedn√°vky!", true, true);
    }
}


// P≈ôid√°n√≠ z√°kazn√≠ka
document.getElementById('addCustomerForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const customerName = document.getElementById('customerName').value.trim();
    if (!customerName) {
        return alert("Zadejte pros√≠m jm√©no z√°kazn√≠ka.");
    }

    try {
        const response = await fetch(`${serverEndpoint}/addCustomer`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ name: customerName })
        });

        const result = await response.json();
        alert(result.message);
        loadCustomers(); // Aktualizace seznamu
    } catch (error) {
        console.error("Chyba p≈ôi p≈ôid√°v√°n√≠ z√°kazn√≠ka:", error);
        alert("Nepoda≈ôilo se p≈ôidat z√°kazn√≠ka.");
    }
});

// Odstranƒõn√≠ z√°kazn√≠ka
async function deleteCustomer(name) {
    const confirmDelete = confirm(`Opravdu chcete smazat z√°kazn√≠ka ${name}?`);
    if (!confirmDelete) return;

    try {
        const response = await fetch(`${serverEndpoint}/deleteCustomer`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ name })
        });

        const result = await response.json();
        alert(result.message);
        loadCustomers(); // Aktualizace seznamu
    } catch (error) {
        console.error("Chyba p≈ôi maz√°n√≠ z√°kazn√≠ka:", error);
        alert("Nepoda≈ôilo se smazat z√°kazn√≠ka.");
    }
}

// Naƒçten√≠ a zobrazen√≠ objedn√°vek z√°kazn√≠ka
async function loadOrders(customerName) {
    try {
        const normalizedCustomer = normalizeCustomerName(customerName); // ‚úÖ Normalizujeme jm√©no

        const response = await fetch(`${serverEndpoint}/customerOrders?customer=${encodeURIComponent(normalizedCustomer)}`);
        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }

        let orders = await response.json();
        console.log("Naƒçten√© objedn√°vky:", orders);

        // ‚úÖ Oprava filtru - odstranƒõn√≠ zaplacen√Ωch objedn√°vek (≈ôe≈°√≠me '@true' i 'true')
        orders = orders.filter(order => 
            order.payed !== "true" && 
            order.payed !== "@true" && 
            order['@payed'] !== "true" && 
            order['@payed'] !== "@true"
        );

        const orderDetails = document.getElementById('orderDetails');
        orderDetails.innerHTML = `<h3>Nezaplacen√© objedn√°vky z√°kazn√≠ka: ${customerName}</h3>`;

        if (orders.length === 0) {
            orderDetails.innerHTML += `<p>≈Ω√°dn√© nezaplacen√© objedn√°vky.</p>`;
            return;
        }

        let totalAmount = 0; // Celkov√° cena v≈°ech nezaplacen√Ωch objedn√°vek

        orders.forEach(order => {
            const orderId = order['@id'] || 'N/A';
            const totalPrice = orders.reduce((sum, order) => {
                const price = Number(order.TotalPrice || 0);
                return sum + (isNaN(price) ? 0 : price);
            }, 0);
            
            const products = order.Products ? order.Products.trim() : 'N/A';
            const orderDate = order.Date ? order.Date : 'N/A';

            totalAmount += Number(totalPrice); // ‚úÖ Sƒç√≠t√°me pouze nezaplacen√© objedn√°vky

            const orderElement = document.createElement('div');
            orderElement.innerHTML = `
                <p>
                  <strong>ID:</strong> ${orderId}, 
                  <strong>Celkov√° cena:</strong> ${totalPrice} Kƒç, 
                  <strong>Datum:</strong> ${orderDate}
                </p>
                <p><strong>Produkty:</strong> ${products}</p>
                <hr>
            `;
            orderDetails.appendChild(orderElement);
        });

        // ‚úÖ P≈ôid√°n√≠ celkov√© ceny na konec
        orderDetails.innerHTML += `<p><strong>Celkov√Ω souƒçet nezaplacen√Ωch objedn√°vek:</strong> ${totalAmount} Kƒç</p>`;

        document.getElementById('orderOverview').style.display = 'block';
    } catch (error) {
        console.error('Chyba p≈ôi naƒç√≠t√°n√≠ objedn√°vek:', error);
        alert('Nepoda≈ôilo se naƒç√≠st objedn√°vky z√°kazn√≠ka.');
    }
}


// üü¢ Funkce pro proveden√≠ platby objedn√°vky z√°kazn√≠ka s potvrzen√≠m
async function payOrder(customerName) {
    console.log(`üì§ Odes√≠l√°m platbu pro z√°kazn√≠ka: "${customerName}"`);

    if (!customerName) {
        console.error("‚ùå Chyba: Chyb√≠ jm√©no z√°kazn√≠ka!");
        alert("‚ùå Nelze prov√©st platbu, chyb√≠ jm√©no z√°kazn√≠ka!");
        return;
    }

    try {
        const response = await fetch(`${serverEndpoint}/payOrder`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ customerName }), // ‚úÖ Opraven√Ω kl√≠ƒç na `customerName`
        });

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`HTTP error! Status: ${response.status} - ${errorText}`);
        }

        const result = await response.json();
        console.log(`‚úÖ Platba √∫spƒõ≈°n√°:`, result);
        loadCustomers()
    } catch (error) {
        console.error("‚ùå Chyba p≈ôi platbƒõ objedn√°vky:", error);
        alert("‚ùå Chyba p≈ôi platbƒõ objedn√°vky!");
    }
}


// Z√≠sk√°n√≠ element≈Ø pro zobrazen√≠ a skryt√≠ formul√°≈ôe pro p≈ôid√°n√≠ z√°kazn√≠ka
const showFormButton = document.getElementById('showAddCustomerFormButton');
const addCustomerSection = document.getElementById('addCustomerSection');
const hideFormButton = document.getElementById('hideFormButton');

// Zobrazit formul√°≈ô pro p≈ôid√°n√≠ z√°kazn√≠ka
showFormButton.addEventListener('click', () => {
    addCustomerSection.style.display = 'block';
    showFormButton.style.display = 'none';
});

// Skr√Ωt formul√°≈ô pro p≈ôid√°n√≠ z√°kazn√≠ka
hideFormButton.addEventListener('click', () => {
    addCustomerSection.style.display = 'none';
    showFormButton.style.display = 'block';
});

// Inicializace ‚Äì naƒçteme z√°kazn√≠ky p≈ôi spu≈°tƒõn√≠
loadCustomers();

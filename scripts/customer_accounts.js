const serverEndpoint = 'http://localhost:3000'; // Zmƒõ≈àte podle pot≈ôeby na cloudovou adresu

// Naƒç√≠t√°n√≠ seznamu z√°kazn√≠k≈Ø
async function loadCustomers() {
    try {
        const response = await fetch(`${serverEndpoint}/customers`);
        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }
        const customers = await response.json();
        await renderCustomerList(customers);
    } catch (error) {
        console.error("Chyba p≈ôi naƒç√≠t√°n√≠ z√°kazn√≠k≈Ø:", error);
        //alert("Nepoda≈ôilo se naƒç√≠st z√°kazn√≠ky.");
    }
}

// Funkce pro z√≠sk√°n√≠ souhrnu objedn√°vek z√°kazn√≠ka
let orders
async function getOrderSummary(customerName) {
    try {
        const sanitizedCustomerName = customerName.replace(/\s+/g, "_");
        const response = await fetch(`${serverEndpoint}/customerOrders?customer=${encodeURIComponent(sanitizedCustomerName)}`);

        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }

        let orders = await response.json(); // ‚úÖ Ujisti se, ≈æe orders existuje

        if (!orders || orders.length === 0) {
            return { lastOrderDate: '≈Ω√°dn√©', totalPrice: '0.00 Kƒç' };
        }

        // ‚úÖ Filtrujeme pouze nezaplacen√© objedn√°vky
        orders = orders.filter(order => 
            order.payed?.toString().replace("@", "") !== "true" &&  
            order['@payed']?.toString().replace("@", "") !== "true"
        );

        // ‚úÖ Se≈ôad√≠me objedn√°vky podle data od nejnovƒõj≈°√≠
        orders = orders.sort((a, b) => new Date(b.Date) - new Date(a.Date));

        const lastOrder = orders.length > 0 ? orders[0] : { Date: 'Nezn√°m√© datum' };

        // ‚úÖ Oprava sƒç√≠t√°n√≠ cen objedn√°vek
        const totalPrice = orders.reduce((sum, order) => {
            const price = Number(order.TotalPrice || 0);
            return sum + (isNaN(price) ? 0 : price);
        }, 0);

        return {
            lastOrderDate: lastOrder.Date,
            totalPrice: `${totalPrice.toFixed(2)} Kƒç`
        };
    } catch (error) {
        console.error("‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ souhrnu objedn√°vek:", error);
        return { lastOrderDate: 'Chyba', totalPrice: 'Chyba' };
    }
}


// Vykreslen√≠ seznamu z√°kazn√≠k≈Ø ve form√°tu tabulky
async function renderCustomerList(customers) {
    const tbody = document.getElementById('customerTableBody');
    tbody.innerHTML = '';

    const promises = customers.map(async customer => {
        const summary = await getOrderSummary(customer.name);
        return { customer, summary };
    });

    const results = await Promise.all(promises);

    results.forEach(({ customer, summary }) => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${customer.name}</td>
            <td>${summary.lastOrderDate}</td>
            <td>${summary.totalPrice} Kƒç</td>
            <td>
                <button class="view-orders" data-name="${customer.name}">Zobrazit</button>
                <button class="pay-all-orders" data-name="${customer.name}">Zaplatit v≈°e</button>
            </td>
        `;
        tbody.appendChild(row);
    });

    document.querySelectorAll('.view-orders').forEach(button => {
        button.addEventListener('click', e => {
            const customerName = e.target.getAttribute('data-name');
            loadOrders(customerName);
        });
    });

    document.querySelectorAll('.pay-all-orders').forEach(button => {
        button.addEventListener('click', e => {
            const customerName = e.target.getAttribute('data-name');
            payAllOrders(customerName);
        });
    });
}
function normalizeCustomerName(name) {
    return name.replace(/\s+/g, "_");
}
async function showPaymentModalForAllOrders(totalAmount, customerName) {
    return new Promise((resolve) => {
        const modal = document.getElementById('payment-modal');
        const modalMessage = document.getElementById('payment-modal-message');
        const closeButton = document.getElementById('close-payment-modal');

        // Kontrola, zda jsou v≈°echny elementy p≈ô√≠tomn√©
        if (!modal || !modalMessage || !closeButton) {
            console.error("‚ùå Chyb√≠ elementy mod√°ln√≠ho okna.");
            resolve(null); // Vr√°t√≠ null, pokud elementy chyb√≠
            return;
        }

        // Zobrazen√≠ mod√°ln√≠ho okna
        modal.style.display = 'block';
        modalMessage.textContent = `Z√°kazn√≠k: ${customerName}\nCelkov√° ƒç√°stka: ${Number(totalAmount).toFixed(2)} Kƒç\nVyberte zp≈Øsob platby:`;

        // P≈ôid√°n√≠ event listener≈Ø na tlaƒç√≠tka zp≈Øsobu platby
        document.querySelectorAll('.payment-method-button').forEach(button => {
            const newButton = button.cloneNode(true); // Klonov√°n√≠ tlaƒç√≠tka
            button.replaceWith(newButton); // Nahrazen√≠ star√©ho tlaƒç√≠tka nov√Ωm
            newButton.onclick = function () {
                const paymentMethod = this.getAttribute('data-method');
                modal.style.display = 'none'; // Zav≈ôen√≠ mod√°ln√≠ho okna
                resolve(paymentMethod);
            };
        });

        // Zav≈ôen√≠ mod√°ln√≠ho okna
        const newCloseButton = closeButton.cloneNode(true); // Klonov√°n√≠ tlaƒç√≠tka zav≈ôen√≠
        closeButton.replaceWith(newCloseButton); // Nahrazen√≠ star√©ho tlaƒç√≠tka nov√Ωm
        newCloseButton.onclick = function () {
            modal.style.display = 'none';
            resolve(null); // Vr√°t√≠ null, pokud u≈æivatel zav≈ôe okno
        };
    });
}

async function payAllOrders(customerName) {
    try {
        const normalizedCustomer = normalizeCustomerName(customerName);

        const response = await fetch(`${serverEndpoint}/customerOrders?customer=${encodeURIComponent(normalizedCustomer)}`);
        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);

        let orders = await response.json();
        const unpaidOrders = orders.filter(order =>
            (order.payed !== true && order.payed !== "true" && order['@payed'] !== "true") &&
            (order.cancelled !== true && order.cancelled !== "true" && order['@cancelled'] !== "true")
        );

        if (unpaidOrders.length === 0) {
            alert(`Z√°kazn√≠k ${customerName} nem√° ≈æ√°dn√© nezaplacen√© objedn√°vky.`);
            return;
        }

        console.log("üìã Nezaplacen√© objedn√°vky:", unpaidOrders);

        // üí∞ Seƒçteme celkovou ƒç√°stku
        const total = unpaidOrders.reduce((sum, order) => sum + Number(order.TotalPrice || 0), 0);

        // üü¢ Zobraz√≠me mod√°ln√≠ okno pro v√Ωbƒõr zp≈Øsobu platby
        const paymentMethod = await showPaymentModalForAllOrders(total, customerName);
        if (!paymentMethod) {
            //alert("Platba byla zru≈°ena.");
            return;
        }

        // ‚úÖ Oznaƒç√≠me ka≈ædou objedn√°vku jako zaplacenou
        for (const order of unpaidOrders) {
            if (!order['@id']) {
                console.error("‚ùå Objedn√°vka nem√° ID:", order);
                continue; // P≈ôeskoƒç√≠me objedn√°vky bez ID
            }
            await markCustomerOrderAsPaid(customerName, order['@id']);
        }

        // üí≥ Zaznamen√°me platbu do smƒõny
        await addPaymentToShift(customerName, total, paymentMethod);

        alert(`‚úÖ ${unpaidOrders.length} objedn√°vek bylo zaplaceno. Celkem ${total.toFixed(2)} Kƒç.`);
        loadOrders(customerName); // Aktualizace

    } catch (error) {
        console.error('‚ùå Chyba p≈ôi placen√≠ v≈°ech objedn√°vek:', error);
        alert('Nepoda≈ôilo se zaplatit v≈°echny objedn√°vky.');
    }
}
async function addPaymentToShift(customerName, total, paymentMethod) {
    try {
        const shiftID = getShiftID(); // Z√≠sk√°n√≠ aktu√°ln√≠ho ID smƒõny
        if (!shiftID) {
            throw new Error("‚ùå Smƒõna nen√≠ otev≈ôen√°!");
        }

        const response = await fetch(`${serverEndpoint}/logOrder`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                order: [
                    {
                        name: `Platba z√°kazn√≠ka ${customerName}`,
                        quantity: 1,
                        price: total,
                        totalPrice: total
                    }
                ],
                paymentMethod: paymentMethod,
                totalAmount: total,
                selectedCustomer: customerName,
                shiftID: shiftID
            })
        });

        if (!response.ok) {
            throw new Error('Chyba p≈ôi zaznamen√°v√°n√≠ platby do smƒõny.');
        }

        console.log(`‚úÖ Platba z√°kazn√≠ka ${customerName} ve v√Ω≈°i ${total} Kƒç byla √∫spƒõ≈°nƒõ zaznamen√°na do smƒõny.`);
    } catch (error) {
        console.error('‚ùå Chyba p≈ôi zaznamen√°v√°n√≠ platby do smƒõny:', error);
        throw error;
    }
}
async function submitOrder() {
    console.log(`üì§ Odes√≠l√°m objedn√°vku:`, order);

    const shiftID = getShiftID(); // üü¢ Kontrola aktu√°ln√≠ smƒõny

    if (!shiftID) {
        console.error("‚ùå Chyba: Smƒõna nen√≠ otev≈ôen√°!");
        showModal("‚ùå Nelze zpracovat objedn√°vku: Smƒõna nen√≠ otev≈ôen√°!", true, true);
        return;
    }

    const requestBody = {
        order: order.map(item => ({
            name: item.name,
            quantity: item.quantity,
            price: item.price,
            totalPrice: item.totalPrice
        })),
        paymentMethod: selectedPaymentMethod,
        totalAmount: totalAmount,
        selectedCustomer: selectedCustomer,
        shiftID: shiftID // ‚úÖ P≈ôid√°no shiftID
    };

    try {
        const response = await fetch(`${serverEndpoint}/logOrder`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(requestBody),
        });

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`HTTP error! Status: ${response.status} - ${errorText}`);
        }

        const result = await response.json();
        console.log(`‚úÖ Objedn√°vka √∫spƒõ≈°nƒõ odesl√°na:`, result);
        resetOrder(); // ‚úÖ Po odesl√°n√≠ vyƒçist√≠ objedn√°vku
    } catch (error) {
        console.error("‚ùå Chyba p≈ôi odes√≠l√°n√≠ objedn√°vky:", error);
        showModal("‚ùå Chyba p≈ôi odes√≠l√°n√≠ objedn√°vky!", true, true);
    }
}


// P≈ôid√°n√≠ z√°kazn√≠ka
document.getElementById('addCustomerForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const customerName = document.getElementById('customerName').value.trim();
    if (!customerName) {
        return alert("Zadejte pros√≠m jm√©no z√°kazn√≠ka.");
    }

    try {
        const response = await fetch(`${serverEndpoint}/addCustomer`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ name: customerName })
        });

        const result = await response.json();
        alert(result.message);
        loadCustomers(); // Aktualizace seznamu
    } catch (error) {
        console.error("Chyba p≈ôi p≈ôid√°v√°n√≠ z√°kazn√≠ka:", error);
        alert("Nepoda≈ôilo se p≈ôidat z√°kazn√≠ka.");
    }
});

// Odstranƒõn√≠ z√°kazn√≠ka
async function deleteCustomer(name) {
    const confirmDelete = confirm(`Opravdu chcete smazat z√°kazn√≠ka ${name}?`);
    if (!confirmDelete) return;

    try {
        const response = await fetch(`${serverEndpoint}/deleteCustomer`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ name })
        });

        const result = await response.json();
        alert(result.message);
        loadCustomers(); // Aktualizace seznamu
    } catch (error) {
        console.error("Chyba p≈ôi maz√°n√≠ z√°kazn√≠ka:", error);
        alert("Nepoda≈ôilo se smazat z√°kazn√≠ka.");
    }
}

// Naƒçten√≠ a zobrazen√≠ objedn√°vek z√°kazn√≠ka
async function loadOrders(customerName) {
    try {
        const normalizedCustomer = normalizeCustomerName(customerName);

        const response = await fetch(`${serverEndpoint}/customerOrders?customer=${encodeURIComponent(normalizedCustomer)}`);
        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }

        let orders = await response.json();
        console.log("Naƒçten√© objedn√°vky:", orders);

        // Filtrujeme pouze objedn√°vky, kter√© nejsou zaplacen√©
        orders = orders.filter(order => {
            const payed = order.payed || order['@payed'];
            return payed !== true && payed !== "true";
        });

        const orderDetails = document.getElementById('orderDetails');
        orderDetails.innerHTML = `<h3>Objedn√°vky z√°kazn√≠ka: ${customerName}</h3>`;

        if (orders.length === 0) {
            orderDetails.innerHTML += `<p>≈Ω√°dn√© objedn√°vky.</p>`;
            return;
        }

        let totalAmount = 0;

        orders.forEach(order => {
            const orderId = order['@id'] || 'N/A';
            const totalPrice = order.TotalPrice || 0;
            const products = order.Products || 'N/A';
            const orderDate = order.Date || 'N/A';

            totalAmount += Number(totalPrice);

            const orderElement = document.createElement('div');
            orderElement.style.marginBottom = '15px';
            orderElement.style.padding = '10px';
            orderElement.style.border = '1px solid #ddd';
            orderElement.style.borderRadius = '8px';
            orderElement.style.backgroundColor = '#f9f9f9';

            orderElement.innerHTML = `
                <p>
                  <strong>ID:</strong> ${orderId}, 
                  <strong>Celkov√° cena:</strong> ${totalPrice} Kƒç, 
                  <strong>Datum:</strong> ${orderDate}
                </p>
                <p><strong>Produkty:</strong> ${products}</p>
                <button class="pay-order-button" data-id="${orderId}">Zaplatit</button>
                <hr>
            `;
            orderDetails.appendChild(orderElement);
        });

        orderDetails.innerHTML += `<p><strong>Celkov√Ω souƒçet nezaplacen√Ωch objedn√°vek:</strong> ${totalAmount} Kƒç</p>`;
        document.getElementById('orderOverview').style.display = 'block';

        // P≈ôid√°n√≠ event listener≈Ø pro tlaƒç√≠tka "Zaplatit"
        document.querySelectorAll('.pay-order-button').forEach(button => {
            button.addEventListener('click', e => {
                const orderId = e.target.getAttribute('data-id');
                console.log(`Kliknuto na tlaƒç√≠tko Zaplatit pro objedn√°vku ID: ${orderId}`);
                showPaymentModal(orderId, customerName);
            });
        });
    } catch (error) {
        console.error('Chyba p≈ôi naƒç√≠t√°n√≠ objedn√°vek:', error);
        alert('Nepoda≈ôilo se naƒç√≠st objedn√°vky z√°kazn√≠ka.');
    }
}

async function showPaymentModal(orderId, customerName) {
    const paymentModal = document.getElementById('payment-modal');
    paymentModal.style.display = 'block';

    // Z√≠sk√°n√≠ objedn√°vek pro dan√©ho z√°kazn√≠ka
    const response = await fetch(`${serverEndpoint}/customerOrders?customer=${encodeURIComponent(normalizeCustomerName(customerName))}`);
    if (!response.ok) {
        alert("Nepoda≈ôilo se naƒç√≠st objedn√°vky z√°kazn√≠ka.");
        return;
    }
    const orders = await response.json();
    const thisOrder = orders.find(o => String(o['@id']) === String(orderId));
    const totalPrice = Number(thisOrder?.TotalPrice || 0);

    // P≈ôid√°n√≠ event listener≈Ø na tlaƒç√≠tka zp≈Øsobu platby
    document.querySelectorAll('.payment-method-button').forEach(button => {
        button.addEventListener('click', async function () {
            const paymentMethod = this.getAttribute('data-method');
            console.log(`üí≥ Plat√≠m objedn√°vku ID: ${orderId} zp≈Øsobem: ${paymentMethod}, cena: ${totalPrice} Kƒç`);

            try {
                // Z√°znam platby do smƒõny
                await payCustomerOrder(orderId, customerName, totalPrice, paymentMethod);


                paymentModal.style.display = 'none'; // Zav≈ôe mod√°ln√≠ okno
                console.log(`‚úÖ Objedn√°vka ID ${orderId} byla √∫spƒõ≈°nƒõ zaplacena.`);
                loadOrders(customerName); // Obnov√≠ seznam
            } catch (error) {
                console.error(`‚ùå Chyba p≈ôi placen√≠ objedn√°vky ID ${orderId}:`, error);
                alert(`Nepoda≈ôilo se zaplatit objedn√°vku ID ${orderId}.`);
            }
        });
    });

    // Zav≈ôen√≠ mod√°ln√≠ho okna
    document.getElementById('close-payment-modal').addEventListener('click', () => {
        paymentModal.style.display = 'none';
    });
}
async function getShiftSummary() {
    try {
        const shiftID = getShiftID(); // Z√≠sk√°n√≠ aktu√°ln√≠ho ID smƒõny
        if (!shiftID) {
            throw new Error("‚ùå Smƒõna nen√≠ otev≈ôen√°!");
        }

        const response = await fetch(`${serverEndpoint}/shiftSummary?shiftID=${shiftID}`);
        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const orders = await response.json(); // Naƒçten√≠ objedn√°vek smƒõny
        console.log("üìã Naƒçten√© objedn√°vky smƒõny:", orders);

        // Inicializace souhrnn√Ωch hodnot
        let totalRevenue = 0;
        let cashRevenue = 0;
        let cardRevenue = 0;
        let employeeAccountRevenue = 0;

        // Iterace p≈ôes objedn√°vky a sƒç√≠t√°n√≠ tr≈æeb podle zp≈Øsobu platby
        orders.forEach(order => {
            const paymentMethod = order.paymentMethod || "Nezn√°m√©";
            const totalPrice = Number(order.totalPrice || 0);

            totalRevenue += totalPrice;

            if (paymentMethod === "Hotovost") {
                cashRevenue += totalPrice;
            } else if (paymentMethod === "Karta") {
                cardRevenue += totalPrice;
            } else if (paymentMethod === "√öƒçet zamƒõstnance") {
                employeeAccountRevenue += totalPrice;
            }
        });

        // V√Ωpis souhrnu do konzole
        console.log("üìä Shrnut√≠ smƒõny:");
        console.log(`Celkov√° tr≈æba: ${totalRevenue.toFixed(2)} Kƒç`);
        console.log(`Hotovost: ${cashRevenue.toFixed(2)} Kƒç`);
        console.log(`Karta: ${cardRevenue.toFixed(2)} Kƒç`);
        console.log(`√öƒçty zamƒõstnanc≈Ø: ${employeeAccountRevenue.toFixed(2)} Kƒç`);

        // Vr√°cen√≠ souhrnu jako objekt
        return {
            totalRevenue: totalRevenue.toFixed(2),
            cashRevenue: cashRevenue.toFixed(2),
            cardRevenue: cardRevenue.toFixed(2),
            employeeAccountRevenue: employeeAccountRevenue.toFixed(2)
        };
    } catch (error) {
        console.error("‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ shrnut√≠ smƒõny:", error);
        return null;
    }
}

async function showShiftSummary() {
    const summary = await getShiftSummary();
    if (summary) {
        alert(`
            üìä Shrnut√≠ smƒõny:
            Celkov√° tr≈æba: ${summary.totalRevenue} Kƒç
            Hotovost: ${summary.cashRevenue} Kƒç
            Karta: ${summary.cardRevenue} Kƒç
            √öƒçty zamƒõstnanc≈Ø: ${summary.employeeAccountRevenue} Kƒç
        `);
    } else {
        alert("‚ùå Nepoda≈ôilo se z√≠skat shrnut√≠ smƒõny.");
    }
}


async function showCustomerOrders(customerName) {
    console.log(`üìã Zobrazuji objedn√°vky z√°kazn√≠ka: ${customerName}`);

    /* Simulace naƒçten√≠ objedn√°vek z√°kazn√≠ka (nahraƒète skuteƒçn√Ωm API vol√°n√≠m)
    const orders = [
        { id: 23, totalPrice: 500, date: '2025-04-13 12:13:14', products: '1x Zonka zelena (50 Kƒç)', paid: false },
        { id: 24, totalPrice: 500, date: '2025-04-13 12:13:14', products: '1x Zonka zelena (50 Kƒç)', paid: false }
    ];*/

    const orderDetails = document.getElementById('orderDetails');
    orderDetails.innerHTML = `<h3>Nezaplacen√© objedn√°vky z√°kazn√≠ka: ${customerName}</h3>`;

    if (orders.length === 0) {
        orderDetails.innerHTML += '<p>≈Ω√°dn√© nezaplacen√© objedn√°vky.</p>';
        return;
    }

    const orderList = document.createElement('ul');
    orderList.style.listStyle = 'none';
    orderList.style.padding = '0';

    orders.forEach(order => {
        const orderItem = document.createElement('li');
        orderItem.style.marginBottom = '15px';
        orderItem.style.padding = '10px';
        orderItem.style.border = '1px solid #ddd';
        orderItem.style.borderRadius = '8px';
        orderItem.style.backgroundColor = '#f9f9f9';
        orderItem.setAttribute('data-order-id', order.id);

        orderItem.innerHTML = `
            <p><strong>ID:</strong> ${order.id}</p>
            <p><strong>Celkov√° cena:</strong> ${order.totalPrice} Kƒç</p>
            <p><strong>Datum:</strong> ${order.date}</p>
            <p><strong>Produkty:</strong> ${order.products}</p>
            ${order.payed !== "true" ? `<button class="pay-order-button" data-id="${order['@id']}">Zaplatit</button>` : '<span>Zaplaceno</span>'}
        `;

        orderList.appendChild(orderItem);
    });

    orderDetails.appendChild(orderList);
}

async function markCustomerOrderAsPaid(customerName, orderId) {
    try {
        const response = await fetch(`${serverEndpoint}/markCustomerOrderAsPaid`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ customerName, orderId })
        });

        if (!response.ok) {
            throw new Error(`Chyba p≈ôi oznaƒçen√≠ objedn√°vky ${orderId} jako zaplacen√©`);
        }

        console.log(`‚úÖ Objedn√°vka ${orderId} z√°kazn√≠ka ${customerName} oznaƒçena jako zaplacen√°.`);
    } catch (error) {
        console.error(`‚ùå ${error}`);
        throw error;
    }
}

// üü¢ Funkce pro proveden√≠ platby objedn√°vky z√°kazn√≠ka s potvrzen√≠m
async function payCustomerOrder(orderId, customerName, totalPrice, paymentMethod = "√öƒçet z√°kazn√≠ka") {
    try {
        console.log(`üîÑ Odes√≠l√°m po≈æadavek na zaplacen√≠ objedn√°vky ID: ${orderId}...`);
        console.log(`Zp≈Øsob platby: ${paymentMethod}`);
        console.log(`Celkov√° ƒç√°stka: ${totalPrice} Kƒç`);

        // P≈ôevod zp≈Øsobu platby na spr√°vn√Ω form√°t
        const formattedPaymentMethod = paymentMethod === "cash" ? "Hotovost" : paymentMethod === "card" ? "Karta" : paymentMethod;

        // Oznaƒçen√≠ objedn√°vky jako zaplacen√©


        // P≈ôizp≈Øsoben√≠ dat pro endpoint `/logOrder`
        const orderData = [
            {
                name: `Platba √∫ƒçtu zamƒõstnance ${customerName}`, // Popis produktu
                quantity: 1, // Jedna platba
                price: totalPrice, // Cena za jednotku
                totalPrice: totalPrice // Celkov√° cena
            }
        ];

        // Zaznamen√°n√≠ platby do smƒõny p≈ôes endpoint `/logOrder`
        const logResponse = await fetch(`${serverEndpoint}/logOrder`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                order: orderData, // Pole produkt≈Ø
                paymentMethod: formattedPaymentMethod, // Zp≈Øsob platby
                totalAmount: totalPrice, // Celkov√° ƒç√°stka
                selectedCustomer: customerName, // Jm√©no z√°kazn√≠ka
                shiftID: getShiftID() // Dynamick√© z√≠sk√°n√≠ ID smƒõny
            })
        });

        if (!logResponse.ok) {
            throw new Error('Chyba p≈ôi zaznamen√°v√°n√≠ platby do smƒõny.');
        }

        console.log(`‚úÖ Platba objedn√°vky ID ${orderId} byla √∫spƒõ≈°nƒõ zaznamen√°na do smƒõny.`);
        await markCustomerOrderAsPaid(customerName, orderId);       
        loadOrders(customerName); // Aktualizace zobrazen√≠ objedn√°vek
    } catch (error) {
        console.error('‚ùå Chyba p≈ôi zpracov√°n√≠ platby objedn√°vky:', error);
    }
}


// Z√≠sk√°n√≠ element≈Ø pro zobrazen√≠ a skryt√≠ formul√°≈ôe pro p≈ôid√°n√≠ z√°kazn√≠ka
const showFormButton = document.getElementById('showAddCustomerFormButton');
const addCustomerSection = document.getElementById('addCustomerSection');
const hideFormButton = document.getElementById('hideFormButton');

// Zobrazit formul√°≈ô pro p≈ôid√°n√≠ z√°kazn√≠ka
showFormButton.addEventListener('click', () => {
    addCustomerSection.style.display = 'block';
    showFormButton.style.display = 'none';
});

// Skr√Ωt formul√°≈ô pro p≈ôid√°n√≠ z√°kazn√≠ka
hideFormButton.addEventListener('click', () => {
    addCustomerSection.style.display = 'none';
    showFormButton.style.display = 'block';
});

// Inicializace ‚Äì naƒçteme z√°kazn√≠ky p≈ôi spu≈°tƒõn√≠
loadCustomers();

// Funkce pro zobrazen√≠ jednoduch√©ho mod√°ln√≠ho okna
function showModalpure(content, isHTML = false) {
    const modal = document.getElementById('modal');
    const modalMessage = document.getElementById('modal-message');

    if (isHTML) {
        modalMessage.innerHTML = content;
    } else {
        modalMessage.textContent = content;
    }

    modal.style.display = 'flex'; // Zobrazen√≠ mod√°ln√≠ho okna
}



// Event listener pro tlaƒç√≠tko OK

// Zajisti, ≈æe modal je skryt√Ω p≈ôi naƒçten√≠ str√°nky
document.addEventListener('DOMContentLoaded', () => {
    const modal = document.getElementById('modal');
    if (modal) {
        modal.style.display = 'none';
    }
});



// P≈ôep√≠n√°n√≠ mezi str√°nkami p≈ôes tlaƒç√≠tka ve footeru
document.getElementById('cashier-button').addEventListener('click', function() {
    window.location.href = 'cashier.html'; // P≈ôesmƒõruje na str√°nku Pokladna
});

document.getElementById('inventory-button').addEventListener('click', function() {
    window.location.href = 'inventory.html'; // P≈ôesmƒõruje na str√°nku Invent√°≈ô
});

document.getElementById('order-management-button').addEventListener('click', function() {
    window.location.href = 'order_management.html'; // P≈ôesmƒõruje na str√°nku Spr√°va objedn√°vek
});

document.getElementById('customer-accounts-button').addEventListener('click', function() {
    window.location.href = 'customer_accounts.html'; // P≈ôesmƒõruje na str√°nku s ucty zakazniku
});
document.getElementById('shift-button').addEventListener('click', function() {
    window.location.href = 'shift.html'; // P≈ôesmƒõruje na str√°nku s ucty zakazniku
});


/*
document.addEventListener('DOMContentLoaded', function() {
    const cancelButton = document.getElementById('cancel-action');
    if (cancelButton) {
        cancelButton.addEventListener('click', function() {
            document.getElementById('modal').style.display = 'none';
        });
    } else {
        console.error("Element s ID 'cancel-action' nebyl nalezen.");
    }
});
*/

document.addEventListener('DOMContentLoaded', () => {
    const modal = document.getElementById('modal');
    const closeModalButton = document.getElementById('close-modal');

    if (modal && closeModalButton) {
        closeModalButton.addEventListener('click', () => {
            modal.style.display = 'none';
        });
    }
});

// Zav≈ôen√≠ mod√°lu kliknut√≠m mimo obsah (voliteln√©)
window.addEventListener('click', (event) => {
    const modal = document.getElementById('modal');
    if (event.target === modal) {
        closeModal();
    }
});
/*
// P≈ôi kliknut√≠ na tlaƒç√≠tko "OK" mod√°l zav≈ôe
document.getElementById('confirm-action').addEventListener('click', () => {
    closeModal();
    // M≈Ø≈æete zde tak√© prov√©st dal≈°√≠ akce, nap≈ô√≠klad reload str√°nky nebo aktualizaci dat
    // location.reload();
});
*/
// Ovƒõ≈ô, ≈æe k√≥d se spust√≠ po naƒçten√≠ DOM
document.addEventListener('DOMContentLoaded', () => {
    const modal = document.getElementById('modal');
    if (modal) {
        modal.style.display = 'none'; // Skryj mod√°l p≈ôi naƒçten√≠
    }
    
    // P≈ôidej event listener na tlaƒç√≠tko pro zav≈ôen√≠ mod√°lu
    const closeButton = document.getElementById('close-modal');
    if (closeButton) {
        closeButton.addEventListener('click', () => {
            closeModal();
        });
    } else {
        console.error("Element s ID 'close-modal' nebyl nalezen.");
    }
});

// Ujist√≠me se, ≈æe k√≥d bƒõ≈æ√≠ po naƒçten√≠ DOM
document.addEventListener('DOMContentLoaded', () => {
    // Skryj mod√°ln√≠ okno p≈ôi naƒçten√≠
    const modal = document.getElementById('modal');
    if (modal) {
        modal.style.display = 'none';
    }
    
    // P≈ôid√°me event listener na tlaƒç√≠tko zav≈ôen√≠ (s ID 'close-modal')
    const closeButton = document.getElementById('close-modal');
    if (closeButton) {
        closeButton.addEventListener('click', () => {
            closeModal();
        });
    } else {
        console.error("Element s ID 'close-modal' nebyl nalezen.");
    }
});

function showModal(message, isError = false) {
    console.log(`üü¢ Otev√≠r√°m modal s obsahem:`, message);

    // Najdeme nebo vytvo≈ô√≠me modal overlay
    let modalOverlay = document.getElementById("modal-overlay");
    if (!modalOverlay) {
        modalOverlay = document.createElement("div");
        modalOverlay.id = "modal-overlay";
        modalOverlay.classList.add("modal-overlay");
        document.body.appendChild(modalOverlay);

        // P≈ôid√°n√≠ modalu do overlaye
        modalOverlay.innerHTML = `
            <div id="modal-content" class="modal-content" onclick="event.stopPropagation();">
                <p id="modal-message"></p>
                <button id="modal-close" class="modal-close">Zav≈ô√≠t</button>
            </div>
        `;

        // Zav≈ôen√≠ modalu p≈ôi kliknut√≠ na overlay nebo tlaƒç√≠tko
        modalOverlay.addEventListener("click", (event) => {
            if (event.target === modalOverlay) {
                closeModal();
            }
        });

        document.getElementById("modal-close").addEventListener("click", closeModal);
    }

    // ‚úÖ Spr√°vnƒõ vlo≈æ√≠me zpr√°vu do modal-content
    const modalMessage = document.getElementById("modal-message");
    if (modalMessage) {
        modalMessage.innerHTML = message;
    } else {
        console.error("‚ùå Chyba: Element #modal-message nebyl nalezen!");
    }

    // ‚úÖ Nastav√≠me modal jako chybov√Ω, pokud je pot≈ôeba
    if (isError) {
        modalOverlay.classList.add("error");
    } else {
        modalOverlay.classList.remove("error");
    }

    // ‚úÖ Otev≈ôeme modal
    modalOverlay.style.display = "flex";
}

async function checkActiveShift() {
    try {
        const response = await fetch(`${serverEndpoint}/currentShift`);
        if (!response.ok) {
            throw new Error("Chyba p≈ôi naƒç√≠t√°n√≠ smƒõny.");
        }

        const shiftData = await response.json();
        console.log(`‚úÖ Aktivn√≠ smƒõna nalezena: ID ${shiftData.shiftID}, Barman: ${shiftData.bartender}`);

        // Pokud smƒõna nen√≠ aktivn√≠, vytvo≈ô√≠me nebo aktualizujeme element #shiftStatus
        if (!shiftData.active) {
            let shiftStatusElement = document.getElementById('shiftStatus');
            if (!shiftStatusElement) {
                console.warn("‚ö†Ô∏è Element #shiftStatus nebyl nalezen. Vytv√°≈ô√≠m nov√Ω element.");
                shiftStatusElement = document.createElement('p');
                shiftStatusElement.id = 'shiftStatus';
                document.body.prepend(shiftStatusElement); // P≈ôid√°me na zaƒç√°tek tƒõla str√°nky
            }

            shiftStatusElement.textContent = "üî¥ ≈Ω√°dn√° aktivn√≠ smƒõna!";
            shiftStatusElement.style.color = 'red';
        } else {
            // Pokud smƒõna je aktivn√≠, odstran√≠me element #shiftStatus, pokud existuje
            const shiftStatusElement = document.getElementById('shiftStatus');
            if (shiftStatusElement) {
                shiftStatusElement.remove();
            }
        }
    } catch (error) {
        console.error("‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ smƒõny:", error);
    }
}

// ‚úÖ Funkce pro zav≈ôen√≠ modalu
function closeModal() {
    const modalOverlay = document.getElementById("modal-overlay");

    if (!modalOverlay) {
        console.error("‚ùå Chyba: Modal nebyl nalezen.");
        return;
    }

    modalOverlay.classList.add("closing");

    setTimeout(() => {
        modalOverlay.classList.remove("visible", "closing");
        modalOverlay.style.display = "none";
    }, 300);
}


// P≈ôid√°n√≠ event listeneru pro zav≈ôen√≠ tlaƒç√≠tkem
document.addEventListener('DOMContentLoaded', () => {
    const closeModalButton = document.getElementById('close-modal');
    if (closeModalButton) {
        closeModalButton.addEventListener('click', closeModal);
    }
});
function showModalConfirm(message) {
    return new Promise((resolve) => {
        const modal = document.getElementById('confirm-modal');
        const modalMessage = document.getElementById('confirm-modal-message');
        const confirmButton = document.getElementById('confirm-modal-yes');
        const cancelButton = document.getElementById('confirm-modal-no');

        if (!modal || !modalMessage || !confirmButton || !cancelButton) {
            console.error("‚ùå Chyba: Potvrzovac√≠ modal nebyl nalezen v DOM!");
            resolve(false);
            return;
        }

        modalMessage.textContent = message;
        modal.style.display = 'block';  // ‚úÖ Zobraz√≠me modal
        modal.style.opacity = '1';      // ‚úÖ Ujist√≠me se, ≈æe je viditeln√Ω
        modal.style.zIndex = '1000';    // ‚úÖ Posuneme nad ostatn√≠ prvky

        confirmButton.onclick = () => {
            modal.style.display = 'none';
            resolve(true);
        };

        cancelButton.onclick = () => {
            modal.style.display = 'none';
            resolve(false);
        };
    });
}


async function submitOrder(order) {
    console.log(`üì§ Odes√≠l√°m objedn√°vku:`, order);

    const shiftID = await getShiftID(); // ‚úÖ Funkce, kter√° zjist√≠ aktu√°ln√≠ smƒõnu

    const requestBody = {
        order: order.items,
        paymentMethod: order.paymentMethod,
        totalAmount: order.totalAmount,
        selectedCustomer: order.selectedCustomer,
        shiftID: shiftID // ‚úÖ P≈ôid√°n√≠ shiftID
    };

    try {
        const response = await fetch(`${serverEndpoint}/logOrder`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(requestBody),
        });

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`HTTP error! Status: ${response.status} - ${errorText}`);
        }

        const result = await response.json();
        console.log(`‚úÖ Objedn√°vka √∫spƒõ≈°nƒõ odesl√°na:`, result);
    } catch (error) {
        console.error("‚ùå Chyba p≈ôi odes√≠l√°n√≠ objedn√°vky:", error);
    }
}
async function getShiftID() {
    try {
        const response = await fetch(`${serverEndpoint}/currentShift`);
        const data = await response.json();
        return data.shiftID || null;
    } catch (error) {
        console.error("‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ shiftID:", error);
        return null;
    }
}

async function checkCurrentShift() {
    try {
        const response = await fetch(`${serverEndpoint}/currentShift`);
        if (!response.ok) {
            throw new Error("Chyba p≈ôi naƒç√≠t√°n√≠ smƒõny.");
        }
        return await response.json();
    } catch (error) {
        console.error("‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ smƒõny:", error);
        return null;
    }
}

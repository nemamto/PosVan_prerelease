let customers = []; 
let order = [];
let totalAmount = 0;
let selectedPaymentMethod = '';
let selectedCustomer = '';
let currentShiftID = null; 
let shiftID 
//const serverEndpoint = 'https://posven00-707895647386.us-central1.run.app';
const serverEndpoint = 'http://127.0.0.1:3000';
// Seznam zakazniku
/*
async function getCustomers() {
    try {
        const response = await fetch({serverEndpoint}'/customers');
        if (!response.ok) {
            throw new Error('Chyba p≈ôi naƒç√≠t√°n√≠ zakazniku');
        }
        const customers = await response.json();
        console.log('Zakaznici:', customers);
    } catch (error) {
        console.error(error);
    }
}


getCustomers(); // Naƒçten√≠ zakazniku p≈ôi naƒç√≠t√°n√≠ str√°nky
*/



// üü¢ Zavol√°me p≈ôi naƒçten√≠ str√°nky
document.addEventListener('DOMContentLoaded', async () => {
    await checkActiveShift(); // ‚úÖ Kontrola smƒõny p≈ôi naƒçten√≠
    await fetchProducts(); // ‚úÖ Naƒçten√≠ produkt≈Ø
});

document.addEventListener('DOMContentLoaded', async () => {
    await fetchProducts(); // Naƒçten√≠ produkt≈Ø p≈ôi naƒçten√≠ str√°nky
});
// P≈ôid√°n√≠ produktu do objedn√°vky
function addProductToOrder(product) {
    const existingProduct = order.find(item => item.name === product.name);

    if (existingProduct) {
        existingProduct.quantity += 1;
        existingProduct.totalPrice = existingProduct.quantity * product.price; // Celkov√° cena
    } else {
        order.push({ ...product, quantity: 1, totalPrice: product.price }); // P≈ôid√°n√≠ cel√©ho objektu produktu
    }

    totalAmount = order.reduce((sum, item) => sum + Number(item.totalPrice), 0); // P≈ôepoƒçet celkov√© ƒç√°stky
    updateOrderSummary();
}

function getNextShiftID() {
    const idsDir = path.join(__dirname, 'data', 'ids');
    ensureDirectoryExistence(idsDir);
    const idPath = path.join(idsDir, 'shift_id.json');
    let currentID = 1;
    if (fs.existsSync(idPath)) {
        const idData = fs.readFileSync(idPath, 'utf8');
        currentID = parseInt(idData, 10) + 1;
    }
    fs.writeFileSync(idPath, currentID.toString());
    return currentID;
}

// Aktualizace zobrazen√≠ objedn√°vky
function updateOrderSummary() {
    const productListSummary = document.getElementById('product-list-summary');
    const totalAmountElement = document.getElementById('total-amount');
    productListSummary.innerHTML = ''; // Vyƒçi≈°tƒõn√≠ seznamu

    order.forEach(product => {
        const productElement = document.createElement('p');
        productElement.innerHTML = `
            ${product.name} (${product.quantity}x) - ${product.totalPrice} Kƒç
            <button class="remove-button">üóëÔ∏è Odebrat</button>

        `;
        productListSummary.appendChild(productElement);
    });

    totalAmountElement.textContent = `Celkov√Ω souƒçet: ${totalAmount} Kƒç`;

    // P≈ôid√°n√≠ event listeneru pro odstranƒõn√≠ produkt≈Ø z objedn√°vky
    document.querySelectorAll('.remove-button').forEach(button => {
        button.addEventListener('click', function() {
            const productName = this.getAttribute('data-name');
            removeProductFromOrder(productName);
        });
    });
}

// Funkce pro odstranƒõn√≠ produktu z objedn√°vky
function removeProductFromOrder(productName) {
    const productIndex = order.findIndex(item => item.name === productName);

    if (productIndex !== -1) {
        const product = order[productIndex];
        totalAmount -= product.totalPrice; // Odejmut√≠ ceny odebran√©ho produktu
        order.splice(productIndex, 1);
    }

    updateOrderSummary();
}

// Odesl√°n√≠ objedn√°vky - tlaƒç√≠tko "Odeslat objedn√°vku"
document.getElementById('submit-order').addEventListener('click', function() {
    submitOrder();
});



async function showCustomerSelectionModal() {
    await fetchCustomersIfNeeded(); // Zajist√≠ naƒçten√≠ z√°kazn√≠k≈Ø

    if (customers.length === 0) {
        showModal('Seznam z√°kazn√≠k≈Ø nen√≠ k dispozici!', true, true);
        return;
    }

    let customerOptions = '<h3>Vyberte z√°kazn√≠ka</h3>';
    customerOptions += '<select class="styled-select" id="customer-select"><option value="">Vyberte...</option>';

    customers.forEach(customer => {
        customerOptions += `<option value="${customer.name}">${customer.name}</option>`;
    });

    customerOptions += '</select><br><br><button class="button" id="confirm-customer">Potvrdit</button>';
    
    showModal(customerOptions, true); // Otev≈ôe mod√°ln√≠ okno s v√Ωbƒõrem

    // P≈ôid√°n√≠ event listeneru a≈æ po zobrazen√≠ mod√°ln√≠ho okna
    setTimeout(() => {
        const confirmButton = document.getElementById('confirm-customer');
        if (confirmButton) {
            confirmButton.addEventListener('click', function () {
                const customerSelect = document.getElementById('customer-select');
                selectedCustomer = customerSelect.value;

                if (selectedCustomer) {
                    console.log(`‚úÖ Vybran√Ω z√°kazn√≠k: ${selectedCustomer}`);
                    closeModal(); // Zav≈ôe mod√°ln√≠ okno
                    submitOrder(); // Pokraƒçuje v procesu objedn√°vky
                } else {
                    showModal('‚ö†Ô∏è Pros√≠m vyberte z√°kazn√≠ka!', true, true);
                }
            });
        }
    }, 100); // Zajist√≠, ≈æe tlaƒç√≠tko existuje p≈ôed p≈ôi≈ôazen√≠m event listeneru
}


function initializeShift() {
    let shiftID = localStorage.getItem("shiftID");

    if (!shiftID) {
        console.warn("‚ö†Ô∏è ≈Ω√°dn√° aktivn√≠ smƒõna. Naƒç√≠t√°m aktu√°ln√≠ smƒõnu...");
        fetch(`${serverEndpoint}/currentShift`)
            .then(response => response.json())
            .then(data => {
                if (data.active) {
                    localStorage.setItem("shiftID", data.shiftID);
                    currentShiftID = data.shiftID;
                    console.log(`‚úÖ Naƒçten√° smƒõna ID: ${data.shiftID}`);
                } else {
                    console.warn("‚ö†Ô∏è ≈Ω√°dn√° aktivn√≠ smƒõna nalezena.");
                    currentShiftID = null;
                }
            })
            .catch(error => console.error("‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ smƒõny:", error));
    } else {
        currentShiftID = shiftID;
        console.log(`‚úÖ Aktivn√≠ smƒõna ID: ${shiftID}`);
    }
}

// Zavol√°me p≈ôi naƒçten√≠ str√°nky
initializeShift();


// üü¢ Funkce pro odesl√°n√≠ objedn√°vky
async function submitOrder() {
    console.log(`üì§ Odes√≠l√°m objedn√°vku:`, order);

    // ‚úÖ Kontrola, zda objedn√°vka nen√≠ pr√°zdn√°
    if (!order || order.length === 0) {
        console.error("‚ùå Chyba: Objedn√°vka je pr√°zdn√°!");
        showModal("‚ùå Nelze odeslat pr√°zdnou objedn√°vku!", true);
        return;
    }

    // ‚úÖ Kontrola, zda byl vybr√°n zp≈Øsob platby
    if (!selectedPaymentMethod) {
        console.error("‚ùå Chyba: Nebyl vybr√°n zp≈Øsob platby!");
        showModal("‚ùå Vyberte zp≈Øsob platby!", true);
        return;
    }

    // ‚úÖ Pokud je platba na √∫ƒçet z√°kazn√≠ka, mus√≠ b√Ωt vybr√°n z√°kazn√≠k
    if (selectedPaymentMethod === "account" && !selectedCustomer) {
        console.error("‚ùå Chyba: Nebyl vybr√°n z√°kazn√≠k!");
        showModal("‚ùå Vyberte z√°kazn√≠ka pro platbu na √∫ƒçet!", true);
        return;
    }

    // Z√≠sk√°me ID aktu√°lnƒõ otev≈ôen√© smƒõny
    const shiftID = getShiftID(); 

    if (!shiftID) {
        console.error("‚ùå Chyba: Smƒõna nen√≠ otev≈ôen√°!");
        // Vyvol√°me mod√°ln√≠ okno s upozornƒõn√≠m ‚Äì nov√° smƒõna se nevytvo≈ô√≠
        showModal("‚ùå Nem√°te aktivn√≠ smƒõnu. Pros√≠m, zahajte smƒõnu p≈ôed odesl√°n√≠m objedn√°vky!", true, true);
        return;
    }

    const requestBody = {
        order: order.map(item => ({
            name: item.name,
            quantity: item.quantity,
            price: item.price,
            totalPrice: item.totalPrice
        })),
        paymentMethod: selectedPaymentMethod,
        totalAmount: totalAmount,
        selectedCustomer: selectedCustomer,
        shiftID: shiftID // ‚úÖ P≈ôid√°no shiftID
    };

    try {
        const response = await fetch(`${serverEndpoint}/logOrder`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(requestBody),
        });

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`HTTP error! Status: ${response.status} - ${errorText}`);
        }

        const result = await response.json();
        console.log(`‚úÖ Objedn√°vka √∫spƒõ≈°nƒõ odesl√°na:`, result);
        resetOrder(); // ‚úÖ Po odesl√°n√≠ vyƒçist√≠ objedn√°vku
    } catch (error) {
        console.error("‚ùå Chyba p≈ôi odes√≠l√°n√≠ objedn√°vky:", error);
        showModal("‚ùå Chyba p≈ôi odes√≠l√°n√≠ objedn√°vky!", true, true);
    }
}
// üü¢ Funkce pro resetov√°n√≠ objedn√°vky po odesl√°n√≠
function resetOrder() {
    order = [];
    totalAmount = 0;
    selectedPaymentMethod = '';
    selectedCustomer = '';
    updateOrderSummary();

    document.querySelectorAll('.payment-button').forEach(button => {
        button.classList.remove('active');
    });
}


// V√Ωbƒõr produktu - simulace kliknut√≠ na produkt
document.querySelectorAll('.product-button').forEach(button => {
    button.addEventListener('click', function() {
        const productData = this.getAttribute('data-value').split(',');
        const productName = productData[0];
        const productPrice = parseInt(productData[1]);
        addProductToOrder(productName, productPrice);
    });
});
async function fetchProducts() {
    try {
        
        const response = await fetch(`${serverEndpoint}/products`);
        if (!response.ok) {
            throw new Error('Chyba p≈ôi naƒç√≠t√°n√≠ produkt≈Ø');
        }
        const products = await response.json();
        renderProducts(products);
    } catch (error) {
        console.error('Chyba:', error);
    }
}

function getRandomColor() {
    const letters = '0123456789ABCDEF';
    let color = '#';
    for (let i = 0; i < 6; i++) {
        color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
}

function renderProducts(products) {
    const productContainer = document.querySelector('.product-container');
    productContainer.innerHTML = ''; // Vyƒçist√≠ p≈ôedchoz√≠ obsah

    // Dynamick√© nastaven√≠ sloupc≈Ø podle ≈°√≠≈ôky okna
    function setGridColumns() {
        const containerWidth = window.innerWidth;
        let columns = Math.floor(containerWidth / 220); // Nap≈ô. produkty ≈°irok√© 200px
        columns = Math.max(columns, 1); // Minim√°lnƒõ 1 sloupec
        productContainer.style.gridTemplateColumns = `repeat(${columns}, 1fr)`; // Nastaven√≠ poƒçtu sloupc≈Ø
    }

    setGridColumns(); // Nastaven√≠ sloupc≈Ø p≈ôi naƒçten√≠
    window.addEventListener('resize', setGridColumns); // Aktualizace p≈ôi zmƒõnƒõ velikosti okna

    products.forEach(product => {
            // ‚úÖ Kontrola, zda je produkt aktivn√≠
        if (product.active !== "true") {
            return; // Pokud nen√≠ aktivn√≠, p≈ôeskoƒç√≠me ho
    }
        const productDiv = document.createElement('div');
        productDiv.className = 'product';

        const productButton = document.createElement('div');
        productButton.className = 'product-button';
        productButton.style.backgroundColor = product.color || '#ccc'; // Defaultn√≠ barva

        productButton.innerHTML = `<span>${product.name} - ${product.price} Kƒç</span>`;
        productDiv.appendChild(productButton);
        productContainer.appendChild(productDiv);

        // P≈ôid√°n√≠ event listeneru pro p≈ôid√°n√≠ produktu do objedn√°vky
        productButton.addEventListener('click', () => addProductToOrder(product));
    });
}



// Funkce pro zav≈ôen√≠ mod√°ln√≠ho okna
document.getElementById('close-modal').addEventListener('click', function() {
    document.getElementById('modal').style.display = 'none';
});


// Zp≈Øsoby platby - Aktivace v√Ωbƒõru platby
document.querySelectorAll('.payment-button').forEach(button => {
    button.addEventListener('click', function() {
        document.querySelectorAll('.payment-button').forEach(btn => {
            btn.classList.remove('active');
        });

        this.classList.add('active');

        const method = this.getAttribute('data-method');
        if (method === 'customer') {
            selectedPaymentMethod = '√öƒçet z√°kazn√≠ka';
            showCustomerSelectionModal(); // Zobrazit mod√°ln√≠ okno s roletkou
        } else {
            selectedPaymentMethod = method === 'cash' ? 'Hotovost' : 'Karta';
        }
    });
});


// Funkce pro zobrazen√≠ mod√°ln√≠ho okna s v√Ωbƒõrem z√°kazn√≠ka
async function fetchCustomersIfNeeded() {
    if (!customers || customers.length === 0) {
        console.log('Naƒç√≠t√°me seznam zakazniku...');
        await fetchCustomers(); // Poƒçk√°me na dokonƒçen√≠ naƒç√≠t√°n√≠ zakazniku
    }
}


async function fetchCustomers() {
    console.log('Naƒç√≠t√°n√≠ seznamu zakazniku...');
    try {
        const response = await fetch(`${serverEndpoint}/customers`);
        if (!response.ok) {
            throw new Error('Chyba p≈ôi naƒç√≠t√°n√≠ zakazniku!');
        }
        customers = await response.json(); // Ulo≈æ√≠ data do glob√°ln√≠ promƒõnn√©
        console.log('Seznam zakazniku byl naƒçten:', customers);
    } catch (error) {
        console.error('Chyba p≈ôi naƒç√≠t√°n√≠:', error);
    }
}


const fs = require('fs');
const path = require('path');
const { create, convert } = require('xmlbuilder2');
const common = require('./service_common');
const shift = require('./service_shift');
const baseDir = path.join(__dirname, '..');
const shiftsDir = path.join(baseDir, 'data', 'shifts');
const productsPath = path.join(baseDir, 'data', 'products.xml');
const customersFolder = path.join(baseDir, 'data', 'customer_accounts');

/**
 * Kontroluje, zda objedn√°vka je platba z√°kaznick√©ho √∫ƒçtu
 * Takov√© objedn√°vky nesm√≠ b√Ωt stornov√°ny p≈ôes bƒõ≈æn√© storno
 */
function isCustomerAccountSettlement(order) {
    if (!order) {
        console.log('üîç isCustomerAccountSettlement: order je null/undefined');
        return false;
    }
    
    console.log('üîç isCustomerAccountSettlement: Kontroluji objedn√°vku', {
        hasMetadata: !!order.metadata,
        hasCustomerOrderIds: !!order.customerOrderIds,
        products: order.products,
        productsType: typeof order.products
    });
    
    // Kontrola podle metadata
    if (order.metadata) {
        try {
            const meta = typeof order.metadata === 'string' ? JSON.parse(order.metadata) : order.metadata;
            if (meta && meta.type === 'customer-account-payment') {
                console.log('‚úÖ Detekov√°na platba √∫ƒçtu podle metadata');
                return true;
            }
        } catch (e) {
            console.warn('‚ö†Ô∏è Chyba p≈ôi parsov√°n√≠ metadata:', e);
        }
    }
    
    // Kontrola podle ID z√°kaznick√Ωch objedn√°vek
    if (order.customerOrderIds && String(order.customerOrderIds).trim()) {
        console.log('‚úÖ Detekov√°na platba √∫ƒçtu podle customerOrderIds');
        return true;
    }
    
    // Kontrola podle obsahu products - pokud obsahuje "customer-order-"
    if (order.products && typeof order.products === 'string') {
        const hasCustomerOrder = order.products.includes('customer-order-');
        const hasUhrada = order.products.includes('√öhrada objedn√°vky');
        const hasUcet = order.products.includes('√öƒçet z√°kazn√≠ka:');
        const hasZakaznik = order.products.includes('Z√°kazn√≠k:');
        
        console.log('üîç Kontrola products:', {
            hasCustomerOrder,
            hasUhrada,
            hasUcet,
            hasZakaznik,
            productsPreview: order.products.substring(0, 100)
        });
        
        if (hasCustomerOrder || hasUhrada || hasUcet || hasZakaznik) {
            console.log('‚úÖ Detekov√°na platba √∫ƒçtu podle obsahu products');
            return true;
        }
    }
    
    console.log('‚ùå Objedn√°vka NEN√ç platba √∫ƒçtu');
    return false;
}

function savecustomerOrderAsXML(orderLog, selectedCustomer, orderID, totalAmount) {
    try {
        console.log("üì¶ Ukl√°d√°m objedn√°vku do z√°kaznick√©ho souboru:", orderLog, selectedCustomer, orderID, totalAmount);

        if (!fs.existsSync(customersFolder)) {
            fs.mkdirSync(customersFolder, { recursive: true });
        }

        // Oprava n√°zvu souboru (mezery -> podtr≈æ√≠tka)
        const sanitizeFileName = (name) => name.replace(/\s+/g, "_");
        const customerFileName = sanitizeFileName(selectedCustomer) + ".xml";
        const customerFilePath = path.join(customersFolder, customerFileName);

        let xmlDoc;

        // Pokud soubor existuje, naƒçteme ho
        if (fs.existsSync(customerFilePath)) {
            const existingData = fs.readFileSync(customerFilePath, 'utf8');

            try {
                xmlDoc = convert(existingData, { format: 'object', trim: true, ignoreComments: false });
            } catch (parseError) {
                console.error("‚ùå Chyba p≈ôi parsov√°n√≠ XML souboru z√°kazn√≠ka:", parseError);
                xmlDoc = { customer: { "@name": selectedCustomer, orders: { order: [] } } };
            }
        } else {
            // Pokud neexistuje, vytvo≈ô√≠me nov√Ω
            xmlDoc = { customer: { "@name": selectedCustomer, orders: { order: [] } } };
        }

        // Zkontrolujeme, zda `orders` existuje
        if (!xmlDoc.customer.orders) {
            xmlDoc.customer.orders = { order: [] };
        }
        if (!Array.isArray(xmlDoc.customer.orders.order)) {
            xmlDoc.customer.orders.order = xmlDoc.customer.orders.order ? [xmlDoc.customer.orders.order] : [];
        }

        // Vytvo≈ôen√≠ nov√© objedn√°vky
        const now = new Date();
        const formattedDateTime = common.getFormattedDateTime();

        const newOrder = {
            "@id": orderID,
            "@payed": "false",
            "@cancelled": "false",
            "Date": formattedDateTime,
            "TotalPrice": totalAmount.toString(),
            "Products": orderLog.OrderDetails.map(p => `${p.Quantity}x ${p.Product} (ID: ${p.ProductID}, ${p.TotalProductPrice} Kƒç)`).join(", ")
        };

        // P≈ôid√°n√≠ nov√© objedn√°vky do XML
        xmlDoc.customer.orders.order.push(newOrder);

        // Ulo≈æen√≠ zpƒõt do souboru
        const updatedXml = create(xmlDoc).end({ prettyPrint: true });
        fs.writeFileSync(customerFilePath, updatedXml);

        console.log(`‚úÖ Objedn√°vka ID ${orderID} byla p≈ôid√°na do z√°kaznick√©ho √∫ƒçtu: ${customerFilePath}`);
    } catch (error) {
        console.error("‚ùå Chyba p≈ôi ukl√°d√°n√≠ objedn√°vky do z√°kaznick√©ho souboru:", error);
    }
}

function cancelOrder(req, res) {
    const orderId = req.params.id;

    let orderFound = false;
    let customerName = null;
    const orderProducts = [];
    let jsonDataToWrite = null;
    let filePathToWrite = null;

    console.log(`ÔøΩ Zahajuji storno objedn√°vky ID: ${orderId}`);

    const files = fs.readdirSync(shiftsDir).filter(file => file.endsWith('.xml'));

    outerLoop:
    for (const file of files) {
        const filePath = path.join(shiftsDir, file);
        const xmlData = fs.readFileSync(filePath, 'utf8');
        const jsonData = convert(xmlData, { format: 'object' });

        if (!jsonData.shift) {
            continue;
        }

        let orders = jsonData.shift.order || jsonData.shift.orders?.order || [];
        if (!Array.isArray(orders)) {
            orders = orders ? [orders] : [];
        }

        for (const order of orders) {
            if (String(order['@id']) !== String(orderId)) {
                continue;
            }

            // Debug: Vyp√≠≈°eme celou objedn√°vku
            console.log(`üîç DEBUG: Kontroluji objedn√°vku ${orderId}:`, JSON.stringify(order, null, 2));

            if (isCustomerAccountSettlement(order)) {
                console.warn(`‚ö†Ô∏è Pokus o storno platby z√°kaznick√©ho √∫ƒçtu (order ${orderId}) ve smƒõnƒõ ${file}.`);
                
                // Vr√°tit objedn√°vky z√°kazn√≠ka zpƒõt na nezaplacen√©
                try {
                    const relatedOrderIds = [];
                    
                    // Z√≠sk√°me ID objedn√°vek z customerOrderIds
                    if (order.customerOrderIds) {
                        const ids = String(order.customerOrderIds).split(',').map(id => id.trim()).filter(Boolean);
                        relatedOrderIds.push(...ids);
                    }
                    
                    // Pokud nem√°me customerOrderIds, zkus√≠me parsovat z products
                    if (relatedOrderIds.length === 0 && order.products) {
                        const matches = order.products.match(/customer-order-(\d+)/g);
                        if (matches) {
                            matches.forEach(match => {
                                const id = match.replace('customer-order-', '');
                                if (id) relatedOrderIds.push(id);
                            });
                        }
                    }
                    
                    // Z√≠sk√°me jm√©no z√°kazn√≠ka
                    let targetCustomer = null;
                    if (order.customerName) {
                        targetCustomer = order.customerName.trim();
                    } else if (order.metadata) {
                        try {
                            const meta = typeof order.metadata === 'string' ? JSON.parse(order.metadata) : order.metadata;
                            if (meta && meta.customerName) {
                                targetCustomer = meta.customerName;
                            }
                        } catch (e) {
                            // Ignorujeme
                        }
                    }
                    
                    // Pokud m√°me z√°kazn√≠ka a ID objedn√°vek, vr√°t√≠me je na nezaplacen√©
                    if (targetCustomer && relatedOrderIds.length > 0) {
                        console.log(`üîÑ Vrac√≠m objedn√°vky ${relatedOrderIds.join(', ')} z√°kazn√≠ka ${targetCustomer} zpƒõt na nezaplacen√©`);
                        const customerFilePath = path.join(customersFolder, `${targetCustomer.replace(/\s/g, '_')}.xml`);
                        
                        if (fs.existsSync(customerFilePath)) {
                            const custXmlData = fs.readFileSync(customerFilePath, 'utf8');
                            let custDoc = convert(custXmlData, { format: 'object' });
                            
                            let custOrders = custDoc.customer.orders?.order || [];
                            if (!Array.isArray(custOrders)) {
                                custOrders = [custOrders];
                            }
                            
                            custOrders.forEach(custOrder => {
                                if (relatedOrderIds.includes(String(custOrder['@id']))) {
                                    custOrder['@payed'] = 'false';
                                    console.log(`‚úÖ Objedn√°vka ${custOrder['@id']} vr√°cena na nezaplacenou`);
                                }
                            });
                            
                            const updatedCustXml = create(custDoc).end({ prettyPrint: true });
                            fs.writeFileSync(customerFilePath, updatedCustXml);
                            console.log(`‚úÖ Z√°kaznick√Ω √∫ƒçet ${targetCustomer} aktualizov√°n`);
                        }
                    }
                } catch (error) {
                    console.error('‚ùå Chyba p≈ôi vracen√≠ objedn√°vek na nezaplacen√©:', error);
                }
                
                // Nyn√≠ stornujeme platebn√≠ objedn√°vku ve smƒõnƒõ
                order['@cancelled'] = 'true';
                order.cancelled = 'true';
                orderFound = true;
                jsonDataToWrite = jsonData;
                filePathToWrite = filePath;
                
                // Platba √∫ƒçtu nem√° skladov√© polo≈æky, tak≈æe je p≈ôeskoƒç√≠me
                console.log('‚ÑπÔ∏è Platba z√°kaznick√©ho √∫ƒçtu stornov√°na (bez vlivu na sklad)');
                break outerLoop;
            }

            console.log(`‚úÖ Nalezena objedn√°vka v souboru ${file}`);
            order['@cancelled'] = 'true';
            order.cancelled = 'true';
            orderFound = true;
            jsonDataToWrite = jsonData;
            filePathToWrite = filePath;

            const productsText = typeof order.products === 'string' ? order.products : '';
            const productRegex = /(\d+x .+? \(ID: [^,]+, [\d.,]+ Kƒç\))/g;
            const matches = productsText.match(productRegex) || [];

            matches.forEach((productEntry) => {
                const match = productEntry.match(/^(\d+)x (.+?) \(ID: ([^,]+), ([\d.,]+) Kƒç\)$/);
                if (!match) {
                    console.warn(`‚ö†Ô∏è Chyba p≈ôi parsov√°n√≠ produktu: ${productEntry}`);
                    return;
                }

                const quantity = parseInt(match[1], 10);
                const productName = match[2].trim();
                const productId = match[3].trim();
                const productPrice = parseFloat(match[4].replace(',', '.'));

                if (!/^\d+$/.test(productId)) {
                    console.log(`‚ÑπÔ∏è Polo≈æka ${productName} (ID: ${productId}) nen√≠ skladov√° polo≈æka, p≈ôeskoƒçeno.`);
                    return;
                }

                orderProducts.push({
                    id: productId,
                    name: productName,
                    quantity,
                    price: productPrice
                });
                console.log(`‚Ü©Ô∏è P≈ôipraveno k vr√°cen√≠: ${quantity}x ${productName} (ID: ${productId}, Cena: ${productPrice} Kƒç)`);
            });

            if (order.customerName) {
                customerName = order.customerName.trim();
            }

            if (!customerName && order.metadata) {
                try {
                    const parsedMeta = typeof order.metadata === 'string'
                        ? JSON.parse(order.metadata)
                        : order.metadata;
                    if (parsedMeta && parsedMeta.customerName) {
                        customerName = String(parsedMeta.customerName).trim();
                    }
                } catch (error) {
                    console.warn('‚ö†Ô∏è Nepoda≈ôilo se parsovat metadata objedn√°vky p≈ôi stornu:', error);
                }
            }

            if (!customerName && order.paymentMethod) {
                customerName = order.paymentMethod.trim();
            }

            break outerLoop;
        }
    }

    if (customerName === '') {
        customerName = null;
    }

    // ‚úÖ Vr√°cen√≠ produkt≈Ø do skladu
    if (orderProducts.length > 0) {
        if (fs.existsSync(productsPath)) {
            try {
                const xmlData = fs.readFileSync(productsPath, 'utf8');
                let productsDoc = convert(xmlData, { format: 'object' });

                if (!Array.isArray(productsDoc.products.product)) {
                    productsDoc.products.product = [productsDoc.products.product];
                }

                orderProducts.forEach((returnedProduct) => {
                    const productInXml = productsDoc.products.product.find((p) =>
                        p['@id'] === returnedProduct.id
                    );

                    if (productInXml) {
                        const currentQuantity = parseInt(productInXml.Quantity, 10) || 0;
                        const updatedQuantity = currentQuantity + returnedProduct.quantity;
                        productInXml.Quantity = updatedQuantity.toString();
                        console.log(`üîÑ Aktualizov√°n sklad: ${returnedProduct.name} -> nov√© mno≈æstv√≠: ${updatedQuantity}`);
                    } else {
                        console.warn(`‚ö†Ô∏è Produkt '${returnedProduct.name}' nenalezen v XML skladu!`);
                    }
                });

                const updatedProductsXml = create(productsDoc).end({ prettyPrint: true });
                fs.writeFileSync(productsPath, updatedProductsXml);
                console.log('‚úÖ Sklad √∫spƒõ≈°nƒõ aktualizov√°n po stornu objedn√°vky.');
            } catch (error) {
                console.error('‚ùå Chyba p≈ôi aktualizaci skladu:', error);
            }
        } else {
            console.error('‚ùå Skladov√Ω soubor neexistuje, produkty nelze vr√°tit.');
        }
    } else {
        console.log('‚ÑπÔ∏è ≈Ω√°dn√© skladov√© polo≈æky k vr√°cen√≠.');
    }

    // ‚úÖ √öprava z√°kaznick√©ho √∫ƒçtu
    if (!customerName) {
        console.warn('‚ö†Ô∏è Jm√©no z√°kazn√≠ka nebylo nalezeno, p≈ôeskoƒçena aktualizace z√°kaznick√©ho √∫ƒçtu.');
    } else {
        console.log(`üìå Aktualizuji √∫ƒçet z√°kazn√≠ka: ${customerName}`);
        const customerFilePath = path.join(customersFolder, `${customerName.replace(/\s/g, '_')}.xml`);
        if (fs.existsSync(customerFilePath)) {
            try {
                const xmlData = fs.readFileSync(customerFilePath, 'utf8');
                let customerDoc = convert(xmlData, { format: 'object' });

                let orders = customerDoc.customer.orders?.order || [];
                if (!Array.isArray(orders)) {
                    orders = [orders];
                }

                // Nastaven√≠ atributu `cancelled` na "true"
                orders.forEach(order => {
                    if (order['@id'] === orderId) {
                        order['@cancelled'] = 'true';
                        console.log(`‚úÖ Objedn√°vka ID ${orderId} oznaƒçena jako stornovan√° v souboru z√°kazn√≠ka ${customerName}.`);
                    }
                });

                const updatedCustomerXml = create(customerDoc).end({ prettyPrint: true });
                fs.writeFileSync(customerFilePath, updatedCustomerXml);
            } catch (error) {
                console.error('‚ùå Chyba p≈ôi aktualizaci z√°kaznick√©ho √∫ƒçtu:', error);
            }
        } else {
            console.warn(`‚ö†Ô∏è Soubor pro z√°kazn√≠ka ${customerName} neexistuje!`);
        }
    }

    if (!orderFound) {
        console.error(`‚ùå Objedn√°vka ID ${orderId} nebyla nalezena.`);
        return res.status(404).json({ message: `Objedn√°vka ${orderId} nebyla nalezena.` });
    }

    if (jsonDataToWrite && filePathToWrite) {
        const updatedXml = create(jsonDataToWrite).end({ prettyPrint: true });
        fs.writeFileSync(filePathToWrite, updatedXml);
        console.log(`‚úÖ Soubor ${path.basename(filePathToWrite)} aktualizov√°n, objedn√°vka stornov√°na.`);
    }

    res.status(200).json({ message: `‚úÖ Objedn√°vka ${orderId} byla stornov√°na a produkty vr√°ceny do skladu.` });
}
function getNextOrderID() {
    const idsDir = path.join(__dirname, '..', 'data', 'ids');
    common.ensureDirectoryExistence(idsDir);
    const idPath = path.join(idsDir, 'order_id.json');
    let currentID = 1;
    if (fs.existsSync(idPath)) {
        const idData = fs.readFileSync(idPath, 'utf8');
        currentID = parseInt(idData, 10) + 1;
    }
    fs.writeFileSync(idPath, currentID.toString());
    return currentID;
}


function payOrder({ customerName, totalPrice, paymentMethod }) {
    if (!customerName || !totalPrice || !paymentMethod) {
        throw new Error("Chyb√≠ povinn√© √∫daje (customerName, totalPrice nebo paymentMethod)!");
    }

    const customerFilePath = path.join(customersFolder, `${customerName.replace(/\s+/g, "_")}.xml`);

    if (!fs.existsSync(customerFilePath)) {
        throw new Error("Soubor z√°kazn√≠ka neexistuje.");
    }

    try {
        // Naƒçti XML a p≈ôeveƒè na JSON
        const xmlData = fs.readFileSync(customerFilePath, 'utf8');
        let jsonData = convert(xmlData, { format: 'object', trim: true, ignoreAttributes: false });

        if (!jsonData.customer || !jsonData.customer.orders || !jsonData.customer.orders.order) {
            return { message: "≈Ω√°dn√© neuhrazen√© objedn√°vky k aktualizaci." };
        }

        let updated = false;

        // Zajist√≠me, ≈æe `order` je v≈ædy pole
        let orders = Array.isArray(jsonData.customer.orders.order)
            ? jsonData.customer.orders.order
            : [jsonData.customer.orders.order];

        orders.forEach(order => {
            if (order.payed === "false" || order["@payed"] === "false") {
                order.payed = "true"; // Nastav√≠me `payed="true"`
                updated = true;
            }
        });

        if (!updated) {
            return { message: "V≈°echny objedn√°vky ji≈æ byly uhrazeny." };
        }

        // P≈ôevod zpƒõt do XML a ulo≈æen√≠
        const updatedXml = create({ version: '1.0' }).ele(jsonData).end({ prettyPrint: true });
        fs.writeFileSync(customerFilePath, updatedXml);

        // P≈ôid√°n√≠ objedn√°vky do aktu√°ln√≠ smƒõny
        const shiftFilePath = shift.findShiftFileByID();
        if (!shiftFilePath) {
            throw new Error("Nebyla nalezena aktu√°ln√≠ smƒõna.");
        }

        const shiftXmlData = fs.readFileSync(shiftFilePath, 'utf8');
        let shiftJsonData = convert(shiftXmlData, { format: 'object', trim: true, ignoreAttributes: false });

        if (!shiftJsonData.shift || !shiftJsonData.shift.orders) {
            shiftJsonData.shift.orders = { order: [] };
        }
        if (!Array.isArray(shiftJsonData.shift.orders.order)) {
            shiftJsonData.shift.orders.order = [shiftJsonData.shift.orders.order];
        }

        const now = new Date();
        const formattedDateTime = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}-${String(now.getDate()).padStart(2, '0')} ${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}:${String(now.getSeconds()).padStart(2, '0')}`;
        const newOrderId = getNextOrderID();

        const newOrder = {
            "@id": newOrderId.toString(),
            "time": formattedDateTime,
            "paymentMethod": paymentMethod,
            "totalPrice": totalPrice.toString(),
            "products": `√öƒçet z√°kazn√≠ka: ${customerName}`
        };

        shiftJsonData.shift.orders.order.push(newOrder);

        // Ulo≈æen√≠ zpƒõt do smƒõny
        const updatedShiftXml = create(shiftJsonData).end({ prettyPrint: true });
        fs.writeFileSync(shiftFilePath, updatedShiftXml);

        return { message: "Objedn√°vky byly aktualizov√°ny jako zaplacen√© a p≈ôid√°ny do aktu√°ln√≠ smƒõny." };
    } catch (error) {
        console.error("‚ùå Chyba p≈ôi aktualizaci objedn√°vek:", error);
        throw new Error("Intern√≠ chyba serveru p≈ôi aktualizaci objedn√°vek.");
    }
}

function logOrder({ order, paymentMethod, totalAmount, selectedCustomer, shiftID, metadata }) {
    if (!shiftID) {
        throw new Error('‚ùå Shift ID nen√≠ definov√°no!');
    }

    const orderID = getNextOrderID();
    const paymentInfo = paymentMethod === '√öƒçet z√°kazn√≠ka' ? selectedCustomer : paymentMethod;

    const normalizedOrder = Array.isArray(order) ? order : [];
    const metadataPayload = (typeof metadata === 'object' && metadata !== null) ? metadata : {};
    const customerOrderIds = Array.isArray(metadataPayload.orderIds)
        ? metadataPayload.orderIds.map((id) => String(id).trim()).filter(Boolean)
        : [];
    const metadataCustomerName = metadataPayload.customerName ? String(metadataPayload.customerName).trim() : null;

    const orderLog = {
        OrderID: orderID,
        PaymentMethod: paymentInfo,
        TotalPrice: totalAmount,
        OrderDetails: normalizedOrder.map(product => ({
            ProductID: product.id,
            Product: product.name,
            Quantity: product.quantity,
            UnitPrice: product.price,
            TotalProductPrice: product.totalPrice
        })),
        CustomerOrderIds: customerOrderIds,
        CustomerName: metadataCustomerName || selectedCustomer || null,
        Metadata: metadataPayload
    };

    // üü¢ Ulo≈æen√≠ objedn√°vky do smƒõny
    saveOrderToShift(orderLog, shiftID);

    // üü¢ Ulo≈æen√≠ do z√°kaznick√©ho √∫ƒçtu, pokud platba je "√öƒçet z√°kazn√≠ka"
    if (paymentMethod === '√öƒçet z√°kazn√≠ka' || (paymentMethod === selectedCustomer && selectedCustomer)) {
        console.log(`üíæ Ukl√°d√°m z√°kaznickou objedn√°vku pro: ${selectedCustomer}`);
        savecustomerOrderAsXML(orderLog, selectedCustomer, orderID, totalAmount);
    }

    // üü¢ Aktualizace skladu
    const productsPath = path.join(__dirname, '..', 'data', 'products.xml');
    if (fs.existsSync(productsPath)) {
        try {
            const xmlData = fs.readFileSync(productsPath, 'utf8');
            let xmlDoc = convert(xmlData, { format: 'object' });

            let products = xmlDoc.products?.product || [];
            if (!Array.isArray(products)) products = [products];

            normalizedOrder.forEach(orderedProduct => {
                if (!orderedProduct.id) {
                    console.error(`‚ùå Chyb√≠ ID pro produkt: ${orderedProduct.name}`);
                    return;
                }

                if (!/^\d+$/.test(String(orderedProduct.id))) {
                    console.log(`‚ÑπÔ∏è √öƒçetn√≠ polo≈æka ${orderedProduct.name} neovliv≈àuje sklad.`);
                    return;
                }

                const productInXml = products.find(p => p['@id'] === orderedProduct.id.toString());
                if (productInXml) {
                    const currentQuantity = parseInt(productInXml.Quantity, 10) || 0;
                    const newQuantity = Math.max(0, currentQuantity - orderedProduct.quantity);
                    console.log(`üîΩ Odeƒç√≠t√°m produkt ${productInXml.Name}: ${currentQuantity} ‚ûù ${newQuantity}`);
                    productInXml.Quantity = newQuantity.toString();
                } else {
                    console.warn(`‚ö†Ô∏è Produkt s ID ${orderedProduct.id} nebyl nalezen ve skladu!`);
                }
            });

            const updatedXml = create(xmlDoc).end({ prettyPrint: true });
            fs.writeFileSync(productsPath, updatedXml);
            console.log('‚úÖ Sklad √∫spƒõ≈°nƒõ aktualizov√°n.');
        } catch (error) {
            console.error('‚ùå Chyba p≈ôi aktualizaci skladu:', error);
            throw new Error('Chyba p≈ôi aktualizaci skladu.');
        }
    } else {
        console.error(`‚ùå Soubor ${productsPath} neexistuje!`);
        throw new Error('Soubor skladu neexistuje.');
    }

    return { message: `‚úÖ Objedn√°vka ID ${orderID} byla ulo≈æena do smƒõny ${shiftID} a sklad byl aktualizov√°n.` };
}


async function saveOrderToShift(orderLog, shiftID) {
    const filePath = shift.findShiftFileByID(shiftID);
    if (!filePath) {
        throw new Error(`Soubor pro smƒõnu s ID ${shiftID} nebyl nalezen.`);
    }
    
    let xmlDoc = create(fs.readFileSync(filePath, 'utf8')).root();
    const now = new Date();
    const formattedDateTime = common.getFormattedDateTime();
    
    const orderNode = xmlDoc.ele('order', { id: orderLog.OrderID });
    orderNode.ele('time').txt(formattedDateTime);
    orderNode.ele('paymentMethod').txt(orderLog.PaymentMethod);
    orderNode.ele('totalPrice').txt(orderLog.TotalPrice);
    
    // Vytvo≈ôen√≠ popisu produkt≈Ø - pokud jde o platbu √∫ƒçtu, p≈ôid√°me jm√©no z√°kazn√≠ka
    let productsSummary = orderLog.OrderDetails.map(product =>
        `${product.Quantity}x ${product.Product} (ID: ${product.ProductID}, ${product.TotalProductPrice} Kƒç)`
    ).join(', ');
    
    // Pokud jde o platbu z√°kaznick√©ho √∫ƒçtu, p≈ôid√°me jm√©no z√°kazn√≠ka na zaƒç√°tek
    const isAccountPayment = orderLog.Metadata && orderLog.Metadata.type === 'customer-account-payment';
    if (isAccountPayment && orderLog.CustomerName) {
        productsSummary = `Z√°kazn√≠k: ${orderLog.CustomerName} | ${productsSummary}`;
    }
    
    orderNode.ele('products').txt(productsSummary);

    if (orderLog.CustomerName) {
        orderNode.ele('customerName').txt(orderLog.CustomerName);
    }

    if (Array.isArray(orderLog.CustomerOrderIds) && orderLog.CustomerOrderIds.length > 0) {
        orderNode.ele('customerOrderIds').txt(orderLog.CustomerOrderIds.join(','));
    }

    if (orderLog.Metadata && Object.keys(orderLog.Metadata).length > 0) {
        try {
            orderNode.ele('metadata').txt(JSON.stringify(orderLog.Metadata));
        } catch (error) {
            console.warn('‚ö†Ô∏è Nepoda≈ôilo se serializovat metadata objedn√°vky:', error);
        }
    }
    
    fs.writeFileSync(filePath, xmlDoc.end({ prettyPrint: true }));
    console.log(`Objedn√°vka ID ${orderLog.OrderID} byla ulo≈æena do smƒõny ${shiftID} (lok√°lnƒõ).`);
}

function restoreOrder(req, res) {
    const orderId = req.params.id;
    const shiftsDir = path.join(__dirname, '..', 'data', 'shifts');
    const productsPath = path.join(__dirname, '..', 'data', 'products.xml');
    const customersFolder = path.join(__dirname, '..', 'data', 'customer_accounts');

    let orderFound = false;
    const orderProducts = [];
    let customerName = null;
    let jsonDataToWrite = null;
    let filePathToWrite = null;

    const files = fs.readdirSync(shiftsDir).filter(file => file.endsWith('.xml'));

    outerLoop:
    for (const file of files) {
        const filePath = path.join(shiftsDir, file);
        const xmlData = fs.readFileSync(filePath, 'utf8');
        const jsonData = convert(xmlData, { format: 'object' });

        if (!jsonData.shift) {
            continue;
        }

        let orders = jsonData.shift.order || jsonData.shift.orders?.order || [];
        if (!Array.isArray(orders)) {
            orders = orders ? [orders] : [];
        }

        for (const order of orders) {
            if (String(order['@id']) !== String(orderId)) {
                continue;
            }

            if (String(order['@cancelled']).toLowerCase() !== 'true') {
                continue;
            }

            if (isCustomerAccountSettlement(order)) {
                console.log(`üîÑ Obnovuji platbu z√°kaznick√©ho √∫ƒçtu (order ${orderId}) ve smƒõnƒõ ${file}.`);
                
                // Vr√°tit objedn√°vky z√°kazn√≠ka zpƒõt na zaplacen√©
                try {
                    const relatedOrderIds = [];
                    
                    // Z√≠sk√°me ID objedn√°vek z customerOrderIds
                    if (order.customerOrderIds) {
                        const ids = String(order.customerOrderIds).split(',').map(id => id.trim()).filter(Boolean);
                        relatedOrderIds.push(...ids);
                    }
                    
                    // Pokud nem√°me customerOrderIds, zkus√≠me parsovat z products
                    if (relatedOrderIds.length === 0 && order.products) {
                        const matches = order.products.match(/customer-order-(\d+)/g);
                        if (matches) {
                            matches.forEach(match => {
                                const id = match.replace('customer-order-', '');
                                if (id) relatedOrderIds.push(id);
                            });
                        }
                    }
                    
                    // Z√≠sk√°me jm√©no z√°kazn√≠ka
                    let targetCustomer = null;
                    if (order.customerName) {
                        targetCustomer = order.customerName.trim();
                    } else if (order.metadata) {
                        try {
                            const meta = typeof order.metadata === 'string' ? JSON.parse(order.metadata) : order.metadata;
                            if (meta && meta.customerName) {
                                targetCustomer = meta.customerName;
                            }
                        } catch (e) {
                            // Ignorujeme
                        }
                    }
                    
                    // Pokud m√°me z√°kazn√≠ka a ID objedn√°vek, vr√°t√≠me je na zaplacen√©
                    if (targetCustomer && relatedOrderIds.length > 0) {
                        console.log(`üîÑ Vrac√≠m objedn√°vky ${relatedOrderIds.join(', ')} z√°kazn√≠ka ${targetCustomer} zpƒõt na zaplacen√©`);
                        const customerFilePath = path.join(customersFolder, `${targetCustomer.replace(/\s/g, '_')}.xml`);
                        
                        if (fs.existsSync(customerFilePath)) {
                            const custXmlData = fs.readFileSync(customerFilePath, 'utf8');
                            let custDoc = convert(custXmlData, { format: 'object' });
                            
                            let custOrders = custDoc.customer.orders?.order || [];
                            if (!Array.isArray(custOrders)) {
                                custOrders = [custOrders];
                            }
                            
                            custOrders.forEach(custOrder => {
                                if (relatedOrderIds.includes(String(custOrder['@id']))) {
                                    custOrder['@payed'] = 'true';
                                    console.log(`‚úÖ Objedn√°vka ${custOrder['@id']} vr√°cena na zaplacenou`);
                                }
                            });
                            
                            const updatedCustXml = create(custDoc).end({ prettyPrint: true });
                            fs.writeFileSync(customerFilePath, updatedCustXml);
                            console.log(`‚úÖ Z√°kaznick√Ω √∫ƒçet ${targetCustomer} aktualizov√°n`);
                        }
                    }
                } catch (error) {
                    console.error('‚ùå Chyba p≈ôi vracen√≠ objedn√°vek na zaplacen√©:', error);
                }
                
                // Nyn√≠ obnov√≠me platebn√≠ objedn√°vku ve smƒõnƒõ
                order['@cancelled'] = 'false';
                order.cancelled = 'false';
                orderFound = true;
                jsonDataToWrite = jsonData;
                filePathToWrite = filePath;
                
                // Platba √∫ƒçtu nem√° skladov√© polo≈æky, tak≈æe je p≈ôeskoƒç√≠me
                console.log('‚ÑπÔ∏è Platba z√°kaznick√©ho √∫ƒçtu obnovena (bez vlivu na sklad)');
                break outerLoop;
            }

            order['@cancelled'] = 'false';
            order.cancelled = 'false';
            orderFound = true;
            jsonDataToWrite = jsonData;
            filePathToWrite = filePath;

            if (order.customerName) {
                customerName = order.customerName.trim();
            }

            if (!customerName && order.metadata) {
                try {
                    const parsedMeta = typeof order.metadata === 'string'
                        ? JSON.parse(order.metadata)
                        : order.metadata;
                    if (parsedMeta && parsedMeta.customerName) {
                        customerName = String(parsedMeta.customerName).trim();
                    }
                } catch (error) {
                    console.warn('‚ö†Ô∏è Nepoda≈ôilo se parsovat metadata objedn√°vky p≈ôi obnoven√≠:', error);
                }
            }

            if (!customerName && order.paymentMethod) {
                customerName = order.paymentMethod.trim();
            }

            const productRegex = /(\d+x .+? \(ID: [^,]+, [\d.,]+ Kƒç\))/g;
            const productsText = typeof order.products === 'string' ? order.products : '';
            const matches = productsText.match(productRegex) || [];

            matches.forEach((productEntry) => {
                const match = productEntry.match(/^(\d+)x (.+?) \(ID: ([^,]+), ([\d.,]+) Kƒç\)$/);
                if (!match) {
                    console.warn(`‚ö†Ô∏è Error parsing product: ${productEntry}`);
                    return;
                }

                const quantity = parseInt(match[1], 10);
                const productName = match[2].trim();
                const productId = match[3].trim();
                const productPrice = parseFloat(match[4].replace(',', '.'));

                if (!/^\d+$/.test(productId)) {
                    console.log(`‚ÑπÔ∏è Polo≈æka ${productName} (ID: ${productId}) nen√≠ skladov√° polo≈æka, p≈ôeskoƒçeno.`);
                    return;
                }

                orderProducts.push({
                    id: productId,
                    name: productName,
                    quantity,
                    price: productPrice
                });
                console.log(`‚Ü©Ô∏è To deduct: ${quantity}x ${productName} (ID: ${productId}, Price: ${productPrice} Kƒç)`);
            });

            break outerLoop;
        }
    }

    if (!orderFound) {
        return res.status(404).json({ message: `Order ${orderId} not found or is not cancelled.` });
    }

    if (jsonDataToWrite && filePathToWrite) {
        const updatedXml = create(jsonDataToWrite).end({ prettyPrint: true });
        fs.writeFileSync(filePathToWrite, updatedXml);
        console.log(`‚úÖ Order ID ${orderId} restored in file ${path.basename(filePathToWrite)}.`);
    }

    if (orderProducts.length > 0) {
        if (fs.existsSync(productsPath)) {
            try {
                const xmlData = fs.readFileSync(productsPath, 'utf8');
                let productsDoc = convert(xmlData, { format: 'object' });

                if (!Array.isArray(productsDoc.products.product)) {
                    productsDoc.products.product = [productsDoc.products.product];
                }

                console.log('‚ôªÔ∏è Deducting products from stock after restoring order:', orderProducts);

                orderProducts.forEach((product) => {
                    const productInXml = productsDoc.products.product.find((p) =>
                        p['@id'] === product.id
                    );
                    if (productInXml) {
                        const currentQuantity = parseInt(productInXml.Quantity, 10) || 0;
                        if (currentQuantity >= product.quantity) {
                            const newQuantity = currentQuantity - product.quantity;
                            productInXml.Quantity = newQuantity.toString();
                            console.log(`‚úÖ Deducted ${product.quantity} pcs of product (ID: ${product.id}) -> new quantity: ${newQuantity}`);
                        } else {
                            console.warn(`‚ö†Ô∏è Attempt to deduct more than available (ID: ${product.id}).`);
                        }
                    } else {
                        console.warn(`‚ö†Ô∏è Product with ID ${product.id} not found in stock!`);
                    }
                });

                const updatedProductsXml = create(productsDoc).end({ prettyPrint: true });
                fs.writeFileSync(productsPath, updatedProductsXml);
                console.log('‚úÖ Stock updated after restoring order.');
            } catch (error) {
                console.error('‚ùå Error updating stock:', error);
            }
        } else {
            console.error('‚ùå Stock file does not exist, cannot deduct products.');
        }
    }

    if (customerName) {
        const customerFilePath = path.join(customersFolder, `${customerName.replace(/\s/g, '_')}.xml`);
        if (fs.existsSync(customerFilePath)) {
            try {
                const xmlData = fs.readFileSync(customerFilePath, 'utf8');
                let customerDoc = convert(xmlData, { format: 'object' });

                let orders = customerDoc.customer.orders?.order || [];
                if (!Array.isArray(orders)) {
                    orders = [orders];
                }

                orders.forEach(order => {
                    if (order['@id'] === orderId) {
                        order['@cancelled'] = 'false';
                        console.log(`‚úÖ Order ID ${orderId} marked as restored in customer file ${customerName}.`);
                    }
                });

                const updatedCustomerXml = create(customerDoc).end({ prettyPrint: true });
                fs.writeFileSync(customerFilePath, updatedCustomerXml);
            } catch (error) {
                console.error('‚ùå Error updating customer account:', error);
            }
        } else {
            console.warn(`‚ö†Ô∏è Customer file for ${customerName} does not exist!`);
        }
    } else {
        console.warn('‚ÑπÔ∏è Z√°kazn√≠k nebyl identifikov√°n p≈ôi obnovƒõ objedn√°vky.');
    }

    res.status(200).json({ message: `Order ${orderId} has been restored and products deducted from stock.` });
}




module.exports = {
    cancelOrder, restoreOrder, savecustomerOrderAsXML, getNextOrderID, saveOrderToShift,
     payOrder, logOrder
    
};
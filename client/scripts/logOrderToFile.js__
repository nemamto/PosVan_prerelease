// Funkce pro zápis objednávky do logu ve formátu JSON
function logOrderToFile() {
    // Získání dnešního data jako názvu souboru ve formátu YYYY-MM-DD
    const today = new Date().toISOString().split('T')[0];
    const logPath = `log/${today}.json`;

    // Vytvoření JSON objektu pro záznam objednávky
    const orderLog = {
        "OrderID": "ID objednávky",  // Zatím prázdné nebo automaticky generované
        "PaymentMethod": selectedPaymentMethod || "",  // Způsob platby
        "TotalPrice": totalAmount,  // Celková cena
        "OrderDetails": order.map(product => ({
            "Product": product.name,
            "Quantity": product.quantity,
            "UnitPrice": product.price,
            "TotalProductPrice": product.totalPrice
        })),
        "Actions": ["Prodej", "Storno", "Vyskladnit", "Naskladnit"],  // Předefinované akce
        "EmployeeAccountID": selectedPaymentMethod === 'Účet zaměstnance' ? selectedEmployee : "",
        "AdditionalInfo": ""  // Prázdné pole pro případné doplnění informací
    };

    // Zápis do souboru (tento krok vyžaduje backendovou podporu, např. Node.js)
    const fs = require('fs');
    const path = require('path');

    // Kontrola, zda složka existuje, jinak ji vytvoří
    if (!fs.existsSync('log')) {
        fs.mkdirSync('log');
    }

    // Kontrola, zda soubor existuje
    if (!fs.existsSync(logPath)) {
        // Pokud soubor neexistuje, vytvoří ho s prvním záznamem
        fs.writeFileSync(logPath, JSON.stringify([orderLog], null, 2));
    } else {
        // Pokud soubor existuje, načte data a přidá nový záznam
        const existingData = JSON.parse(fs.readFileSync(logPath, 'utf8'));
        existingData.push(orderLog);
        fs.writeFileSync(logPath, JSON.stringify(existingData, null, 2));
    }
}

